// automatically generated by the FlatBuffers compiler, do not modify

namespace gen
{

using System;
using FlatBuffers;

public sealed class RolePos : Table {
  public static RolePos GetRootAsRolePos(ByteBuffer _bb) { return GetRootAsRolePos(_bb, new RolePos()); }
  public static RolePos GetRootAsRolePos(ByteBuffer _bb, RolePos obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public RolePos __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public float GetPos(int j) { int o = __offset(4); return o != 0 ? bb.GetFloat(__vector(o) + j * 4) : (float)0; }
  public int PosLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPosBytes() { return __vector_as_arraysegment(4); }
  public float Rotate { get { int o = __offset(6); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }

  public static Offset<RolePos> CreateRolePos(FlatBufferBuilder builder,
      VectorOffset posOffset = default(VectorOffset),
      float rotate = 0.0f) {
    builder.StartObject(2);
    RolePos.AddRotate(builder, rotate);
    RolePos.AddPos(builder, posOffset);
    return RolePos.EndRolePos(builder);
  }

  public static void StartRolePos(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPos(FlatBufferBuilder builder, VectorOffset posOffset) { builder.AddOffset(0, posOffset.Value, 0); }
  public static VectorOffset CreatePosVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static void StartPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotate(FlatBufferBuilder builder, float rotate) { builder.AddFloat(1, rotate, 0.0f); }
  public static Offset<RolePos> EndRolePos(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RolePos>(o);
  }
};


}
