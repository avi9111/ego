// automatically generated by the FlatBuffers compiler, do not modify

package gen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RegReq struct {
	_tab flatbuffers.Table
}

func GetRootAsRegReq(buf []byte, offset flatbuffers.UOffsetT) *RegReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RegReq{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RegReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RegReq) Town() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RegReq) ClientAuth() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RegReq) RoleInfo(obj *RoleInfo) *RoleInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RoleInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RegReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RegReqAddTown(builder *flatbuffers.Builder, town flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(town), 0)
}
func RegReqAddClientAuth(builder *flatbuffers.Builder, clientAuth flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(clientAuth), 0)
}
func RegReqAddRoleInfo(builder *flatbuffers.Builder, roleInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(roleInfo), 0)
}
func RegReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
