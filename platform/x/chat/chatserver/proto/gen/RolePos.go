// automatically generated by the FlatBuffers compiler, do not modify

package gen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RolePos struct {
	_tab flatbuffers.Table
}

func GetRootAsRolePos(buf []byte, offset flatbuffers.UOffsetT) *RolePos {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RolePos{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RolePos) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RolePos) Pos(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *RolePos) PosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RolePos) Rotate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *RolePos) MutateRotate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func RolePosStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RolePosAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pos), 0)
}
func RolePosStartPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RolePosAddRotate(builder *flatbuffers.Builder, rotate float32) {
	builder.PrependFloat32Slot(1, rotate, 0.0)
}
func RolePosEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
