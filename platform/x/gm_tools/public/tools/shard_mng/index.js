// Generated by CoffeeScript 1.12.7
(function() {
  var AntdButton, Api, App, Button, Col, DatePicker, Form, FormItem, LanguagePicker, Modal, MultiLangPicker, Option, React, ReactBootstrap, Row, Select, Table, Tag, antd, langMap, multiLang;

  antd = require('antd');

  Api = require('../api/api_ajax');

  React = require('react');

  ReactBootstrap = require('react-bootstrap');

  Row = antd.Row;

  Col = antd.Col;

  Form = antd.Form;

  FormItem = antd.Form.Item;

  Button = ReactBootstrap.Button;

  Table = antd.Table;

  Modal = antd.Modal;

  AntdButton = antd.Button;

  Tag = antd.Tag;

  Select = antd.Select;

  Option = antd.Option;

  DatePicker = antd.DatePicker;

  multiLang = require('../../common/multi_lang');

  LanguagePicker = multiLang.LanguagePicker;

  MultiLangPicker = multiLang.MultiLangPicker;

  langMap = multiLang.langMap;

  App = React.createClass({displayName: "App",
    getInitialState: function() {
      var ss_init;
      ss_init = {};
      ss_init["0"] = "新服";
      ss_init["1"] = "流畅";
      ss_init["2"] = "火爆";
      ss_init["3"] = "拥挤";
      ss_init["4"] = "维护";
      ss_init["5"] = "体验";
      ss_init["6"] = "玩家不可见";
      return {
        shard_show_state_const: ss_init,
        query_shards_res: [],
        machine_online: {},
        gamex_online: {},
        modal_visible: false,
        modal_title: "",
        oper_gid: "",
        oper_sid: "",
        oper_state: "",
        dn_value: "",
        oper_ip: "",
        oper_sn: "",
        oper_showstate: "0",
        oper_sevstarttime: "",
        oper_machine: "",
        lang_dn: "",
        language: this.getLangMap(""),
        cur_lang: "zh-Hans",
        multi_lang: ""
      };
    },
    getLangMap: function(lang) {
      var key, tempLang;
      langMap = {
        "zh-Hans": "zh-Hans",
        "zh-SG": "zh-SG",
        "zh-HMT": "zh-HMT",
        "en": "en"
      };
      tempLang = {};
      if (!this.IsJsonString(lang)) {
        for (key in langMap) {
          tempLang[key] = {
            dn: ""
          };
        }
      } else {
        tempLang = JSON.parse(lang);
      }
      return tempLang;
    },
    IsJsonString: function(jsonStr) {
      var err;
      if (jsonStr === "" || !jsonStr) {
        return false;
      }
      try {
        JSON.parse(jsonStr);
        return true;
      } catch (error) {
        err = error;
        return false;
      }
    },
    modalOk: function() {
      var api;
      if (this.dn_validationState() === 'success') {
        api = new Api();
        api.Typ("setShard2Etcd").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.state.oper_gid, this.state.oper_sid, this.state.dn_value, this.state.oper_state, this.state.oper_ip, this.state.oper_sn, this.state.oper_showstate, this.state.oper_sevstarttime, this.state.multi_lang, JSON.stringify(this.state.language)]).Do((function(_this) {
          return function(result) {
            var j, len, query, querys, results;
            if (result === "ok") {
              querys = _this.state.query_shards_res;
              results = [];
              for (j = 0, len = querys.length; j < len; j++) {
                query = querys[j];
                if (String(query["Gid"]) === _this.state.oper_gid && String(query["Sid"]) === _this.state.oper_sid) {
                  query["DName"] = _this.state.dn_value;
                  query["State"] = _this.state.oper_state;
                  query["ShowState"] = _this.state.oper_showstate;
                  query["Language"] = JSON.stringify(_this.state.language);
                  query["MultiLang"] = _this.state.multi_lang;
                  _this.setState({
                    query_shards_res: querys
                  });
                  break;
                } else {
                  results.push(void 0);
                }
              }
              return results;
            }
          };
        })(this));
        return this.setState({
          modal_visible: false
        });
      }
    },
    modalCancel: function() {
      return this.setState({
        modal_visible: false
      });
    },
    query_shards: function() {
      var api;
      api = new Api();
      return api.Typ("getShardsFromEtcd").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray().Do((function(_this) {
        return function(result) {
          var e, gamex_onl, j, len, machine_onl, ref, res;
          console.log(result);
          res = JSON.parse(result);
          machine_onl = {};
          gamex_onl = {};
          ref = res["Shards"];
          for (j = 0, len = ref.length; j < len; j++) {
            e = ref[j];
            if (e["Machine"] !== "") {
              machine_onl[e["Sid"]] = e["Machine"];
            }
            if (e["SName"] !== "" && e["State"] === "online" && e["Ip"] !== "") {
              gamex_onl[e["Sid"]] = e["Ip"];
            }
          }
          return _this.setState({
            query_shards_res: res["Shards"],
            machine_online: machine_onl,
            gamex_online: gamex_onl
          });
        };
      })(this));
    },
    table_shards_columns: function() {
      var that;
      that = this;
      return [
        {
          title: '机器IP',
          dataIndex: 'machine',
          sorter: function(a, b) {
            return a.machine.localeCompare(b.machine);
          }
        }, {
          title: 'Gid',
          dataIndex: 'gid',
          sorter: function(a, b) {
            return a.gid - b.gid;
          }
        }, {
          title: 'Sid',
          dataIndex: 'sid',
          sorter: function(a, b) {
            return a.sid.localeCompare(b.sid);
          }
        }, {
          title: '游戏服显示名称',
          dataIndex: 'dn'
        }, {
          title: '服务器显示状态',
          dataIndex: 'ss',
          render: function(text, record) {
            if (record.ss === "维护") {
              return React.createElement("div", {
                "color": "red"
              }, " ", record.ss, " ");
            }
            return React.createElement("div", null, " ", record.ss, " ");
          }
        }, {
          title: '游戏服IP',
          dataIndex: 'ip',
          sorter: function(a, b) {
            return a.ip.localeCompare(b.ip);
          }
        }, {
          title: 'ShardName',
          dataIndex: 'sn'
        }, {
          title: '设置的开服时间',
          dataIndex: 'starttime'
        }, {
          title: '启动时间',
          dataIndex: 'lauchtime'
        }, {
          title: '开服时间',
          dataIndex: 'realstarttime'
        }, {
          title: '服务器版本号',
          dataIndex: 'version'
        }, {
          title: '玩家可见',
          dataIndex: 'state'
        }, {
          title: '玩家可进',
          dataIndex: 'gs',
          render: function(text, record) {
            var color, title;
            color = "red";
            title = "No";
            if ((that.state.gamex_online[record.sid] != null) && record.ss !== "维护") {
              color = "green";
              title = "Yes";
            }
            return React.createElement(Tag, {
              "color": color
            }, title);
          }
        }, {
          title: '操作',
          key: 'operation',
          render: function(text, record) {
            if (record.sn !== "") {
              return React.createElement(Button, {
                "bsStyle": 'primary',
                "onClick": ((function(_this) {
                  return function() {
                    var defaultML, id, initLang, operstate, show_state_id, t, tempLangMap;
                    show_state_id = "0";
                    for (id in that.state.shard_show_state_const) {
                      if (that.state.shard_show_state_const[id] === record.ss) {
                        show_state_id = id;
                        break;
                      }
                    }
                    t = "大区:" + record.gid + "   服务器Id:" + record.sid;
                    operstate = "";
                    if (record.state === "Yes") {
                      operstate = "online";
                    }
                    tempLangMap = that.getLangMap(record.language);
                    initLang = "zh-Hans";
                    defaultML = "0";
                    if (record.multi_lang === "1") {
                      defaultML = "1";
                    }
                    return that.setState({
                      modal_title: t,
                      oper_gid: record.gid,
                      oper_sid: record.sid,
                      oper_state: operstate,
                      dn_value: record.dn,
                      oper_ip: record.ip,
                      oper_sn: record.sn,
                      oper_showstate: show_state_id,
                      oper_sevstarttime: record.starttime,
                      oper_machine: record.machine,
                      modal_visible: true,
                      language: tempLangMap,
                      lang_dn: tempLangMap[initLang].dn,
                      cur_lang: initLang,
                      multi_lang: defaultML
                    });
                  };
                })(this))
              }, "操作");
            } else {
              return React.createElement("div", null, " ");
            }
          }
        }
      ];
    },
    table_shards_content: function() {
      var f, i, id, j, len, query, ref, res, show_state, st;
      res = [];
      i = 0;
      ref = this.state.query_shards_res;
      for (j = 0, len = ref.length; j < len; j++) {
        query = ref[j];
        show_state = "";
        id = query["ShowState"];
        if (id != null) {
          f = this.state.shard_show_state_const[id];
          if (f != null) {
            show_state = f;
          }
        }
        st = "";
        if (query["State"] === "online") {
          st = "Yes";
        }
        res.push({
          key: i,
          machine: query["Machine"],
          gid: String(query["Gid"]),
          sid: String(query["Sid"]),
          dn: query["DName"],
          ip: query["Ip"],
          sn: query["SName"],
          starttime: query["StartTime"],
          lauchtime: query["LaunchTime"],
          realstarttime: query["RealStartTime"],
          version: query["Version"],
          state: st,
          ss: show_state,
          language: query["Language"],
          multi_lang: query["MultiLang"]
        });
        i += 1;
      }
      return res;
    },
    checkDN: function(rule, value, callback) {
      if (value.length <= 0) {
        return callback("不能为空");
      }
    },
    dn_handleChange: function(event) {
      return this.setState({
        dn_value: event.target.value
      });
    },
    dn_validationState: function() {
      var v;
      v = this.state.dn_value;
      if (v.length > 0) {
        return 'success';
      } else {
        return 'error';
      }
    },
    onModalSubmit: function() {
      var api;
      console.log("onModalSubmit");
      console.log(this.state);
      api = new Api();
      api.Typ("setShardStateEtcd").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.state.oper_gid, (this.state.oper_sid - 1).toString(), "2"]).Do((function(_this) {
        return function(result) {
          return console.log(result);
        };
      })(this));
      return this.setState({
        oper_state: "online"
      });
    },
    onSerRestart: function() {
      var api;
      api = new Api();
      return api.Typ("restartShard").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.state.oper_gid, this.state.oper_sid, this.state.oper_machine]).Do((function(_this) {
        return function(result) {
          return console.log(result);
        };
      })(this));
    },
    select_op: function() {
      var k, ref, res, v;
      res = [];
      ref = this.state.shard_show_state_const;
      for (k in ref) {
        v = ref[k];
        res.push(React.createElement(Option, {
          "value": k
        }, v));
      }
      return res;
    },
    onSelectChange: function(value) {
      console.log("on");
      console.log(value);
      return this.setState({
        oper_showstate: value
      });
    },
    onChangeSevStartDate: function(date) {
      var dateStr;
      dateStr = date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate();
      console.log(dateStr);
      return this.setState({
        oper_sevstarttime: dateStr
      });
    },
    getInitDatePicker: function() {
      return this.state.oper_sevstarttime.slice(0, 10);
    },
    handleMultiLangChange: function(value) {
      return this.setState({
        multi_lang: value
      });
    },
    handleLanguageChange: function(value) {
      var tempMap;
      tempMap = this.state.language;
      return this.setState({
        cur_lang: value,
        lang_dn: tempMap[value].dn
      });
    },
    handleLangDnChange: function(event) {
      var tempMap;
      tempMap = this.state.language;
      tempMap[this.state.cur_lang].dn = event.target.value;
      return this.setState({
        lang_dn: event.target.value,
        language: tempMap
      });
    },
    render: function() {
      return React.createElement("div", null, React.createElement("p", null, "说明："), React.createElement("p", null, "玩家可见：在游戏服务器列表中是否可以见到此服务器"), React.createElement("p", null, "玩家可进：选中此服务器后，是否可以成功进入游戏"), React.createElement("p", null, "当服务器没有上线过时，可以进行重启操作（此操作不要连续点），之后QA进行账号白名单测试，测试完成后，上线则玩家可进了"), React.createElement("p", null, "[设置的开服时间]是运营设置的时间，[启动时间]是服务器启动时间，[开服时间]是服务器运营活动实际用的时间"), React.createElement("p", null, "[设置的开服时间]应该等于[开服时间]，并早于[启动时间]才正确"), React.createElement("br", null), React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": this.query_shards
      }, "获取Shards信息"), React.createElement(Table, {
        "columns": this.table_shards_columns(),
        "dataSource": this.table_shards_content()
      }), React.createElement(Modal, {
        "title": this.state.modal_title,
        "visible": this.state.modal_visible,
        "onOk": this.modalOk,
        "onCancel": this.modalCancel
      }, React.createElement("div", null, React.createElement(ReactBootstrap.Input, {
        "label": "服务器显示名称（display name）:",
        "type": 'text',
        "value": this.state.dn_value,
        "bsStyle": this.dn_validationState(),
        "hasFeedback": true,
        "ref": 'dn_input',
        "groupClassName": 'group-class',
        "labelClassName": 'label-class',
        "onChange": this.dn_handleChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "多语言:"), React.createElement(MultiLangPicker, {
        "defaultValue": this.state.multi_lang,
        "value": this.state.multi_lang,
        "handleChange": this.handleMultiLangChange
      }), React.createElement("div", null, "语言类型:"), React.createElement(LanguagePicker, {
        "defaultValue": this.state.cur_lang,
        "handleChange": this.handleLanguageChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "服务器名字:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.lang_dn,
        "onChange": this.handleLangDnChange
      })), React.createElement("div", null, React.createElement(Row, null, React.createElement(Col, {
        "span": "6",
        "offset": "1"
      }, "服务器显示状态："))), React.createElement("div", null, React.createElement(Row, null, React.createElement(Col, {
        "span": "6",
        "offset": "1"
      }, React.createElement(Select, {
        "defaultValue": this.state.oper_showstate,
        "style": {
          width: 120
        },
        "onSelect": this.onSelectChange
      }, this.select_op())))), React.createElement("p", null, React.createElement("br", null)), React.createElement(Form, {
        "horizontal": true
      }, React.createElement(FormItem, {
        "label": "设置服务器开服时间："
      }, React.createElement(Col, {
        "span": "6"
      }, React.createElement(DatePicker, {
        "name": "sevstarttime",
        "value": this.getInitDatePicker(),
        "format": "yyyy/MM/dd",
        "onChange": this.onChangeSevStartDate
      })))), React.createElement("div", null, React.createElement(AntdButton, {
        "type": "primary",
        "disabled": this.state.oper_state === "online" || this.state.oper_ip === "" || this.state.oper_sn === "" || this.state.oper_machine === "",
        "onClick": this.onSerRestart
      }, "服务器重启")), React.createElement("p", null, React.createElement("br", null)), React.createElement("div", null, React.createElement(Row, null, React.createElement(Col, {
        "span": "5",
        "offset": "2"
      }, React.createElement(AntdButton, {
        "type": "primary",
        "disabled": this.state.oper_state === "online" || this.state.oper_ip === "" || this.state.oper_sn === "",
        "onClick": this.onModalSubmit
      }, "服务器上线")), React.createElement(Col, {
        "span": "8"
      }, (this.state.oper_state === "online" ? "服务器已上线" : void 0, this.state.oper_ip === "" || this.state.oper_sn === "" ? "服务器未正常启动, 不能上线" : void 0))))));
    }
  });

  module.exports = App;

}).call(this);
