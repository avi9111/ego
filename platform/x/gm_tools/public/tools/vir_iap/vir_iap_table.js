// Generated by CoffeeScript 1.12.7
(function() {
  var Api, React, Table, VirIAPTable, antd, boot, time_2_str;

  antd = require('antd');

  boot = require('react-bootstrap');

  Api = require('../api/api_ajax');

  React = require('react');

  Table = boot.Table;

  time_2_str = function(t) {
    var d;
    d = new Date(t * 1000);
    return d.toString();
  };

  VirIAPTable = React.createClass({displayName: "VirIAPTable",
    getInitialState: function() {
      return {
        mails: [],
        is_loading: true
      };
    },
    componentDidMount: function() {
      return this.Refersh(0);
    },
    Refersh: function(time_wait) {
      var api;
      this.setState({
        is_loading: true
      });
      if ((time_wait != null) && time_wait > 0) {
        setTimeout(this.Refersh, time_wait * 1000);
        return;
      }
      api = new Api();
      return api.Typ("getVirtualIAP").ServerID(this.props.server_id).AccountID(this.props.account_id).Key(this.props.curr_key).Do((function(_this) {
        return function(result) {
          _this.setState({
            mails: JSON.parse(result),
            is_loading: false
          });
          console.log("on_loaded");
          return _this.props.on_loaded();
        };
      })(this));
    },
    getRewardInf: function(ids, cs) {
      var idx, item_id, re;
      re = "";
      for (idx in ids) {
        item_id = ids[idx];
        re = re + item_id + ":" + cs[idx] + ",";
      }
      return re;
    },
    isIAP: function(v) {
      var is_iap;
      if (v.ItemId !== null) {
        is_iap = v.ItemId[0] === "VI_HC_Buy";
        return [is_iap, v.Count[0], v.IsGetted];
      } else {
        return [0, 0, 0];
      }
    },
    getDelButton: function(is_get, id) {
      return React.createElement("delButton", {
        "id": id,
        "key": id,
        "on_deled": ((function(_this) {
          return function() {
            return _this.Refersh(1);
          };
        })(this)),
        "disabled": is_get,
        "server_id": this.props.server_id,
        "account_id": this.props.account_id
      });
    },
    del: function(id) {
      return (function(_this) {
        return function() {
          var api;
          api = new Api();
          return api.Typ("delVirtualIAP").ServerID(_this.props.server_id).AccountID(_this.props.account_id).Key(_this.props.curr_key).Params(id).Do(function(result) {
            console.log("on_deled");
            return _this.Refersh(1);
          });
        };
      })(this);
    },
    getAllInfo: function(data) {
      var hc, is_get, is_iap, k, re, ref, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in data) {
        v = data[k];
        ref = this.isIAP(v), is_iap = ref[0], hc = ref[1], is_get = ref[2];
        if (is_iap) {
          re.push(React.createElement("tr", {
            "key": k
          }, React.createElement("td", null, v.Idx), React.createElement("td", null, time_2_str(v.TimeEnd)), React.createElement("td", null, hc), React.createElement("td", null, (is_get ? "已领取" : "未领取")), React.createElement("td", null, React.createElement(boot.Button, {
            "bsStyle": 'danger',
            "disabled": is_get,
            "onClick": this.del(v.Idx)
          }, "删除"))));
        }
      }
      return re;
    },
    getRewardList: function() {
      if (this.state.is_loading) {
        return React.createElement("i", {
          "className": "anticon anticon-loading"
        });
      }
      return React.createElement(boot.Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "ID"), React.createElement("th", null, "结束时间"), React.createElement("th", null, "奖励HC"), React.createElement("th", null, "是否已领取"), React.createElement("th", null, "删除"))), React.createElement("tbody", null, this.getAllInfo(this.state.mails)));
    },
    render: function() {
      return React.createElement("div", {
        "className": "ant-form-inline"
      }, this.getRewardList());
    }
  });

  module.exports = VirIAPTable;

}).call(this);
