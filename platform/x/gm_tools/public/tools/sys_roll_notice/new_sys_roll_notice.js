// Generated by CoffeeScript 1.12.7
(function() {
  var Api, DatePicker, InputNumber, Modal, MultiLangModal, NewModal, NewModalWithButton, RangePicker, React, RewardMaker, SysRollNotice, TimeUtil, antd, multiLang;

  antd = require('antd');

  Api = require('../api/api_ajax');

  Modal = antd.Modal;

  DatePicker = antd.DatePicker;

  RangePicker = DatePicker.RangePicker;

  InputNumber = antd.InputNumber;

  RewardMaker = require('../../common/reward_maker');

  SysRollNotice = require('./notice');

  TimeUtil = require('../util/time');

  React = require('react');

  multiLang = require('../../common/multi_lang');

  MultiLangModal = multiLang.MultiLangModal;

  NewModal = React.createClass({displayName: "NewModal",
    getInitialState: function() {
      var n;
      if (this.props.notice != null) {
        return {
          loading: false,
          visible: false,
          notice: this.props.notice
        };
      } else {
        n = (new Date()).getTime();
        return {
          loading: false,
          visible: false,
          notice: new SysRollNotice({
            begintime: n,
            endtime: n,
            id: 0,
            interval: 30,
            command: {
              server: "0:0",
              params: ["", "", "", "0", "", "", "", "", ""]
            }
          })
        };
      }
    },
    showModal: function() {
      return this.setState({
        visible: true
      });
    },
    handleOk: function() {
      this.setState({
        loading: true
      });
      this.setState({
        loading: false,
        visible: false
      });
      return this.props.on_ok(this.state.notice);
    },
    handleCancel: function() {
      return this.setState({
        visible: false
      });
    },
    handleStartStopChange: function(value) {
      var notice;
      console.log('From: ', value[0], ', to: ', value[1]);
      notice = this.state.notice;
      notice.begin = parseInt(value[0].getTime(), 10);
      notice.end = parseInt(value[1].getTime(), 10);
      this.setState({
        notice: notice
      });
    },
    handleLangChange: function(value) {
      var notice;
      notice = this.state.notice;
      notice.multi_lang = value.multi_lang;
      notice.language = value.language;
      notice.title = value.title;
      notice.info = value.body;
      return this.setState({
        notice: notice
      });
    },
    handleIntervalChange: function(count) {
      var notice;
      notice = this.state.notice;
      notice.interval = count;
      return this.setState({
        notice: notice
      });
    },
    getTimeToStr: function(date, format) {
      var rs;
      console.log(date);
      rs = TimeUtil.DateFormat(new Date(date * 1000), format);
      console.log(rs);
      return rs;
    },
    render: function() {
      var base;
      return React.createElement(Modal, Object.assign({
        "ref": "modal"
      }, this.props, {
        "visible": this.state.visible,
        "title": this.props.modal_name,
        "onOk": this.handleOk,
        "onCancel": this.handleCancel,
        "width": 700,
        "footer": [
          React.createElement("button", {
            "key": "back",
            "className": "ant-btn",
            "onClick": this.handleCancel
          }, "返 回"), React.createElement("button", {
            "key": "submit",
            "className": "ant-btn ant-btn-primary",
            "onClick": this.handleOk
          }, "提 交", React.createElement("i", {
            "className": 'anticon anticon-loading' + (typeof (base = this.state).loading === "function" ? base.loading({
              '': 'hide'
            }) : void 0)
          }))
        ]
      }), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "时间:"), React.createElement(RangePicker, {
        "showTime": true,
        "format": "yyyy/MM/dd HH:mm:ss",
        "onChange": this.handleStartStopChange
      }), React.createElement("div", null, "时间间隔(秒):"), React.createElement(InputNumber, {
        "min": 1,
        "max": 1000000,
        "defaultValue": parseInt(this.state.notice.interval, 10),
        "onChange": this.handleIntervalChange,
        "style": {
          width: 85
        }
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement(MultiLangModal, Object.assign({}, this.props, {
        "title": this.state.notice.title,
        "body": this.state.notice.info,
        "multi_lang": this.state.notice.multi_lang,
        "lang": this.state.notice.language,
        "handleChange": this.handleLangChange
      }))));
    }
  });

  NewModalWithButton = React.createClass({displayName: "NewModalWithButton",
    showModal: function() {
      return this.refs.sys_roll_notice_modal.showModal();
    },
    handleOk: function(notice) {
      var i, id, len, loadFunc, ref, results;
      console.log(notice);
      loadFunc = (function(_this) {
        return function() {
          return _this.props.on_loaded();
        };
      })(this);
      ref = this.props.server_id;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        id = ref[i];
        results.push(notice.NewToServer(id, this.props.account_id, this.props.curr_key, loadFunc));
      }
      return results;
    },
    render: function() {
      return React.createElement("div", null, React.createElement(NewModal, Object.assign({}, this.props, {
        "ref": "sys_roll_notice_modal",
        "on_ok": this.handleOk
      })), React.createElement("button", {
        "className": "ant-btn ant-btn-primary",
        "onClick": this.showModal
      }, this.props.modal_name));
    }
  });

  module.exports = {
    NewModal: NewModal,
    NewModalWithButton: NewModalWithButton
  };

}).call(this);
