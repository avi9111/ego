// Generated by CoffeeScript 1.12.7
(function() {
  var $, Api, ReactCookie, antd, notification, openNotificationWithIcon;

  antd = require('antd');

  ReactCookie = require('react-cookie');

  $ = require('jquery');

  notification = antd.notification;

  openNotificationWithIcon = function(type, title, msg) {
    return notification[type]({
      message: title,
      description: msg,
      duration: 5
    });
  };

  Api = (function() {
    function Api() {}

    Api.prototype.Typ = function(typ) {
      this.command_typ = typ;
      return this;
    };

    Api.prototype.ServerID = function(id) {
      this.server_id = id;
      return this;
    };

    Api.prototype.AccountID = function(id) {
      this.account_id = id;
      return this;
    };

    Api.prototype.Key = function(id) {
      this.key = id;
      return this;
    };

    Api.prototype.Params = function() {
      var i, len, p, res;
      if (arguments != null) {
        res = [];
        for (i = 0, len = arguments.length; i < len; i++) {
          p = arguments[i];
          res.push(p.toString());
        }
        this.params = res;
      } else {
        this.params = [];
      }
      console.log(this.params);
      return this;
    };

    Api.prototype.ParamArray = function(a) {
      this.params = a;
      console.log(this.params);
      return this;
    };

    Api.prototype.Do = function(on_success) {
      var ndata, self;
      if (this.params == null) {
        this.params = [];
      }
      ndata = {
        "params": this.params,
        "key": this.key
      };
      console.log(ndata);
      self = this;
      return $.ajax({
        url: this.mkUrl(),
        dataType: "json",
        type: "POST",
        data: JSON.stringify(ndata),
        contentType: "application/json; charset=utf-8",
        complete: function(xhr, status) {
          var rc;
          rc = {
            status: xhr.status,
            json: xhr.responseJSON
          };
          console.log(xhr);
          if (xhr.status === 200) {
            openNotificationWithIcon('success', self.command_typ, xhr.responseText);
          } else {
            if (xhr.status === 401) {
              ReactCookie.save('taihe-gm-tool-key', "", {
                path: '/'
              });
            }
            openNotificationWithIcon('error', self.command_typ, xhr.responseText);
          }
          if (on_success != null) {
            return on_success(xhr.responseText, xhr.responseJSON, xhr.status);
          }
        }
      });
    };


    /*
        /api/v1/command/0:0/0:0:111/adfadsf/getVirtualIAP
     */

    Api.prototype.mkUrl = function() {
      if (this.command_typ == null) {
        console.error("Api mkUrl Err by no @command_typ");
        return null;
      }
      if (this.server_id == null) {
        console.error("Api mkUrl Err by no @server_id");
        return null;
      }
      if (this.key == null) {
        console.error("Api mkUrl Err by no @key");
        return null;
      }
      if ((this.account_id == null) || this.account_id === "") {
        this.account_id = "ac";
      }
      return "../api/v1/command/" + this.server_id + "/" + this.account_id + "/" + this.command_typ;
    };
      

    return Api;

  })();

  module.exports = Api;

}).call(this);
