// Generated by CoffeeScript 1.12.7
(function() {
  var Api, App, Button, Checkbox, CheckboxGroup, Col, Demo, Form, FormItem, Grid, Input, Modal, Option, React, ReactBootstrap, Row, Select, Table, antd, defaultPlainOptions, tbody, td, tr;

  antd = require('antd');

  Api = require('../api/api_ajax');

  React = require('react');

  ReactBootstrap = require('react-bootstrap');

  Form = antd.Form;

  FormItem = antd.Form.Item;

  Input = antd.Input;

  Button = antd.Button;

  Table = antd.Table;

  Modal = antd.Modal;

  Select = antd.Select;

  Option = Select.Option;

  Grid = ReactBootstrap.Grid;

  Row = ReactBootstrap.Row;

  Col = ReactBootstrap.Col;

  tbody = ReactBootstrap.tbody;

  tr = ReactBootstrap.tr;

  td = ReactBootstrap.td;

  Checkbox = antd.Checkbox;

  CheckboxGroup = Checkbox.Group;

  defaultPlainOptions = ['0:10', '0:11', '0:12'];

  Demo = React.createClass({displayName: "Demo",
    getInitialState: function() {
      return {
        vershard: [],
        shardHotInfo: [],
        batch_version: "",
        select_version: "",
        select_gidsid: "",
        modal_visible: false,
        modal_title: "",
        modal_content: "",
        selected_sid: [],
        all_sid: []
      };
    },
    handleSubmit_ver: function(e) {
      var api;
      e.preventDefault();
      api = new Api();
      return api.Typ("getServerByVersion").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.props.form.getFieldValue("version")]).Do((function(_this) {
        return function(result) {
          var res;
          console.log("result" + result);
          res = JSON.parse(result);
          _this.onReceiveSidList(res["Infos"]);
          return _this.setState({
            vershard: res["Infos"]
          });
        };
      })(this));
    },
    handleSubmit_data_old: function(e) {
      var api, j, len, ref, sp, v;
      e.preventDefault();
      sp = [this.props.form.getFieldValue("version"), this.props.form.getFieldValue("datac")];
      ref = this.state.selected_sid;
      for (j = 0, len = ref.length; j < len; j++) {
        v = ref[j];
        if (v != null) {
          sp.push(v);
        }
      }
      console.log(sp);
      api = new Api();
      return api.Typ("setVersionHotC").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.props.form.getFieldValue("version")]).Do((function(_this) {
        return function(result) {
          var res;
          console.log("result" + result);
          res = JSON.parse(result);
          return _this.setState({
            vershard: res["Infos"],
            batch_version: ver
          });
        };
      })(this));
    },
    handleSubmit_data: function(e) {
      var api, j, len, ref, sp, v, ver;
      e.preventDefault();
      sp = [this.props.form.getFieldValue("version"), this.props.form.getFieldValue("datac")];
      ref = this.state.selected_sid;
      for (j = 0, len = ref.length; j < len; j++) {
        v = ref[j];
        if (v != null) {
          sp.push(v);
        }
      }
      console.log(sp);
      ver = this.props.form.getFieldValue("version");
      api = new Api();
      return api.Typ("setVersionHotC").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray(sp).Do((function(_this) {
        return function(result) {
          console.log("result " + result);
          return _this.setState({
            batch_version: ver
          });
        };
      })(this));
    },
    onReceiveSidList: function(data) {
      var all_sid, j, len, s;
      all_sid = [];
      for (j = 0, len = data.length; j < len; j++) {
        s = data[j];
        all_sid.push(s);
      }
      return this.setState({
        all_sid: all_sid,
        selected_sid: []
      });
    },
    GetShardDataInfo: function() {
      var api;
      api = new Api();
      return api.Typ("getServerHotData").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.props.form.getFieldValue("version")]).Do((function(_this) {
        return function(result) {
          var res;
          console.log("result" + result);
          res = JSON.parse(result);
          return _this.setState({
            shardHotInfo: res["Infos"]
          });
        };
      })(this));
    },
    table_shards_columns: function() {
      var that;
      that = this;
      return [
        {
          title: '版本号',
          dataIndex: 'version',
          sorter: function(a, b) {
            return a.version.localeCompare(b.version);
          }
        }, {
          title: '数据热更号',
          dataIndex: 'datac',
          sorter: function(a, b) {
            return a.datac - b.datac;
          }
        }, {
          title: 'GidSid',
          dataIndex: 'gidsid',
          sorter: function(a, b) {
            return a.shard - b.shard;
          }
        }, {
          title: '基础数据build',
          dataIndex: 'basebuild'
        }, {
          title: '热更数据号',
          dataIndex: 'hotdatac'
        }, {
          title: '热更数据build',
          dataIndex: 'hotbuild'
        }, {
          title: '发热更信号',
          key: 'signal',
          render: function(text, record) {
            if (record.datac !== "" && Number(record.datac) > 0) {
              return React.createElement(Button, {
                "type": 'primary',
                "onClick": ((function(_this) {
                  return function() {
                    console.log("signal " + record.gidsid);
                    return that.setState({
                      modal_visible: true,
                      select_version: record.version,
                      select_gidsid: record.gidsid,
                      modal_title: "版本号: " + record.version + "  服务器: " + record.gidsid,
                      modal_content: "热更数据: " + record.datac
                    });
                  };
                })(this))
              }, "操作");
            } else {
              return React.createElement("div", null, " ");
            }
          }
        }
      ];
    },
    table_shards_content: function() {
      var i, info, j, len, ref, res;
      i = 0;
      res = [];
      ref = this.state.shardHotInfo;
      for (j = 0, len = ref.length; j < len; j++) {
        info = ref[j];
        res.push({
          key: i,
          version: info["Version"],
          datac: info["VerSeq"],
          gidsid: info["GidSid"],
          basebuild: info["SidBaseHotBuild"],
          hotdatac: info["SidHotSeq"],
          hotbuild: info["SidHotBuild"]
        });
        i += 1;
      }
      return res;
    },
    modalOk: function() {
      var api;
      api = new Api();
      api.Typ("signalServerHotC").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray([this.state.select_gidsid, this.state.select_version]).Do((function(_this) {
        return function(result) {
          return console.log("result " + result);
        };
      })(this));
      return this.setState({
        modal_visible: false
      });
    },
    modalCancel: function() {
      return this.setState({
        modal_visible: false
      });
    },
    dataUpdate: function() {
      var api, j, len, param, ref, v;
      param = [];
      param.push(this.state.batch_version);
      ref = this.state.selected_sid;
      for (j = 0, len = ref.length; j < len; j++) {
        v = ref[j];
        if (v != null) {
          param.push(v);
        }
      }
      console.log("param " + param);
      api = new Api();
      return api.Typ("signalAllServerHotC").ServerID("").AccountID("").Key(this.props.curr_key).ParamArray(param).Do((function(_this) {
        return function(result) {
          return console.log("result " + result);
        };
      })(this));
    },
    selectSid: function(e) {
      var j, len, ss, value;
      ss = [];
      for (j = 0, len = e.length; j < len; j++) {
        value = e[j];
        ss.push(value);
      }
      return this.setState({
        selected_sid: ss
      });
    },
    onCheckAllChange: function(e) {
      if (e.length > 0) {
        return this.selectSid(this.state.all_sid);
      } else {
        return this.setState({
          selected_sid: []
        });
      }
    },
    genSelectAllCheckBox: function() {
      return React.createElement("div", null, React.createElement("div", null, React.createElement(CheckboxGroup, {
        "options": ["全选"],
        "onChange": this.onCheckAllChange
      })));
    },
    genGroupCheckBox: function(ar) {
      var a, j, len, plainOptions;
      plainOptions = [];
      for (j = 0, len = ar.length; j < len; j++) {
        a = ar[j];
        plainOptions.push(a);
      }
      console.log(plainOptions);
      return React.createElement("div", {
        "style": {
          width: 500
        }
      }, React.createElement(CheckboxGroup, {
        "options": plainOptions,
        "value": this.state.selected_sid,
        "onChange": this.selectSid
      }));
    },
    gencheckbox: function() {
      var res;
      res = [];
      res.push(this.genGroupCheckBox(this.state.all_sid));
      if (res.length > 0) {
        res.unshift(this.genSelectAllCheckBox());
      }
      return res;
    },
    render: function() {
      var getFieldProps;
      getFieldProps = this.props.form.getFieldProps;
      return React.createElement("div", null, React.createElement("p", null, "说明："), React.createElement("p", null, "用于服务器数据热更新"), React.createElement("p", null, "1、输入版本号，[获取指定版本的服务器]"), React.createElement("p", null, "2、输入要更新的数据版本号，并勾选要更新的服务器，并[提交]"), React.createElement("p", null, "3、此时可以[获取服务器数据信息]，在要更新的服务器后面点[操作]执行单个更新"), React.createElement("p", null, "3、此时也可以[热更新]，更新全部选中的服务器"), React.createElement("br", null), React.createElement(Form, {
        "inline": true,
        "onSubmit": this.handleSubmit_ver
      }, React.createElement(FormItem, {
        "label": "版本号: "
      }, React.createElement(Input, Object.assign({
        "placeholder": ""
      }, getFieldProps('version')))), React.createElement(Button, {
        "type": "primary",
        "htmlType": "submit"
      }, "获取指定版本的服务器")), React.createElement(Form, {
        "inline": true,
        "onSubmit": this.handleSubmit_data
      }, React.createElement(FormItem, {
        "label": "数据No.: "
      }, React.createElement(Input, Object.assign({
        "placeholder": "请输入数据打包号"
      }, getFieldProps('datac')))), React.createElement(Button, {
        "type": "primary",
        "htmlType": "submit"
      }, "提交")), React.createElement(Button, {
        "style": {
          marginTop: 24
        },
        "type": "primary",
        "onClick": this.dataUpdate
      }, "热更新"), React.createElement("div", {
        "style": {
          marginBottom: 24
        }
      }, React.createElement("br", null)), React.createElement("div", null, this.gencheckbox()), React.createElement("div", {
        "style": {
          marginBottom: 24
        }
      }, React.createElement("br", null)), React.createElement(Form, {
        "horizontal": true
      }, React.createElement(FormItem, null, React.createElement(Button, {
        "type": "primary",
        "onClick": this.GetShardDataInfo
      }, "获取服务器数据信息")), React.createElement(FormItem, null, React.createElement(Table, {
        "columns": this.table_shards_columns(),
        "dataSource": this.table_shards_content()
      }))), React.createElement(Modal, {
        "title": this.state.modal_title,
        "visible": this.state.modal_visible,
        "onOk": this.modalOk,
        "onCancel": this.modalCancel
      }, "是否确定", this.state.modal_content));
    }
  });

  App = Form.create()(Demo);

  module.exports = App;

}).call(this);
