// Generated by CoffeeScript 1.12.7

(function() {
  var Sider, $, StateMenu, TimeSetPick, Api, NewSendModal, PublicTable, React, Table, TimeUtil, antd, boot, App;

  antd = require('antd');

  boot = require('react-bootstrap');

  Api = require('../api/api_ajax');

  NewSendModal = require('./new_public');

  TimeUtil = require('../util/time');

  Table = boot.Table;

  React = require('react');

  App = require('./index');

  TimeSetPick = require('../../common/siders');

  StateMenu = require('../../common/siders');

  $ = require('jquery');

  Sider = require('../../common/siders');


  /*
  notices : [
      {
          id:23234234,
          game_id:0
          priority:3
          typ:1
          title:ddddd
          body:fdsfsdfdsfds
          begin:23432432
          end:32423423
          state:0,1
          language:zh-Hans
      }
  ]
   */


  PublicTable = React.createClass({displayName: "PublicTable",
    getInitialState: function() {
      return {
        notices: {},
        is_loading: true
      };
    },
    componentDidMount: function() {
      return this.Refersh(0);
    },
    Refersh: function(time_wait) {
      var api;
      this.setState({
        is_loading: true
      });
      if ((time_wait != null) && time_wait > 0) {
        setTimeout(this.Refersh, time_wait * 1000);
        return;
      }
      api = new Api();
      return api.Typ("getSysPublic").ServerID(this.props.server_id).AccountID(this.props.account_id).Key(this.props.curr_key).Params(this.props.version).Do((function(_this) {
        return function(result) {
          _this.setState({
            notices: JSON.parse(result),
            is_loading: false
          });
          console.log(JSON.parse(result));
          console.log("on_loaded");
          return _this.props.on_loaded();
        };
      })(this));
    },
    getDelButton: function(is_get, id) {
      return React.createElement("delButton", {
        "id": id,
        "key": id,
        "on_deled": ((function(_this) {
          return function() {
            return _this.Refersh(1);
          };
        })(this)),
        "disabled": is_get,
        "server_id": this.props.server_id,
        "account_id": this.props.account_id
      });
    },
    del: function(id) {
      return (function(_this) {
        return function() {
          var api;
          api = new Api();
          return api.Typ("delSysPublic").ServerID(_this.props.server_id).AccountID(_this.props.account_id).Key(_this.props.curr_key).Params(id).Do(function(result) {
            console.log("on_deled");
            return _this.Refersh(0.3);
          });
        };
      })(this);
    },
    modSendModal: function(id) {
      return (function(_this) {
        return function() {
          var ref_str;
          ref_str = "SysPublicModal" + id;
          return _this.refs[ref_str].ShowModal();
        };
      })(this);
    },
    send: function(i) {
      var api, day, end, end_day_time, hours, minutes, month, seconds, start, start_day_time, year;
      console.log("state");
      console.log(this.state.notices[i]);
      api = new Api();
      start = new Date(this.state.notices[i].begin);
      year = start.getFullYear();
      month = (start.getMonth() + 1).toString();
      day = start.getDate().toString();
      hours = start.getHours().toString();
      minutes = start.getMinutes().toString();
      seconds = start.getSeconds().toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      if (day.length === 1) {
        day = '0' + day;
      }
      if (hours.length === 1) {
        hours = '0' + hours;
      }
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      start_day_time = year + '/' + month + '/' + day + ' ' + hours + ':' + minutes + ':' + seconds;
      end = new Date(this.state.notices[i].end);
      year = end.getFullYear();
      month = (end.getMonth() + 1).toString();
      day = end.getDate().toString();
      hours = (end.getHours()).toString();
      minutes = end.getMinutes().toString();
      seconds = end.getSeconds().toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      if (day.length === 1) {
        day = '0' + day;
      }
      if (hours.length === 1) {
        hours = '0' + hours;
      }
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      end_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
      return api.Typ("sendSysPublic").ServerID(this.props.server_id).AccountID(i).Key(this.props.curr_key).Params(this.props.gid, this.state.notices[i].priority, this.state.notices[i].typ, start_day_time, end_day_time, this.state.notices[i].state, this.state.notices[i].title, this.state.notices[i].body, this.props.version, this.state.notices[i]["class"], this.state.notices[i].lang, this.state.notices[i].multi_lang).Do((function(_this) {
        return function(result) {
          _this.setState({
            notices: JSON.parse(result),
            is_loading: false
          });
          console.log(_this);
          console.log(JSON.parse(result));
          console.log("on_loaded");
          return _this.Refersh(0.3);
        };
      })(this));
    },
    activityPublic: function(id) {
      return (function(_this) {
        return function() {
          var states;
          states = _this.state.notices;
          if (states[id].state === "0" || states[id].state === 0) {
            states[id].state = "1";
          } else {
            states[id].state = "0";
          }
          _this.setState({
            notices: states
          });
          return _this.send(id);
        };
      })(this);
    },
    getPublicClass: function(c) {
      switch (c) {
        case "Publics":
          return "通常";
        case "Maintaince":
          return "维护";
        case "Forceupdate":
          return "强制更新";
      }
    },

      getLocalTime:function(i) {
          if (typeof i !== 'number') return;
          var d = new Date();
          var len = d.getTime();
          var offset = d.getTimezoneOffset() * 60000;
          var utcTime = len + offset;
          return new Date(utcTime + 3600000 * i);
      },


    getStateString: function(v) {

      var begin_t, end_t, now_t;
      if (v.state === 0) {
        return "未发布";
      }
      now_t = this.getLocalTime(this.props.curr_time);
      console.log(this);
      begin_t = new Date(v.begin);
      end_t = new Date(v.end);
      console.log(now_t);

      if ((begin_t <= now_t && now_t < end_t)) {
        return "已发布";
      }
      if (now_t >= end_t) {
        return "已过期";
      }
      if (now_t < begin_t) {
        return "未到期";
      }
    },
    getAllInfo: function(data) {
      var k, re, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in data) {
        v = data[k];
        console.log(v);
        console.log(v.game_id);
        console.log(this.props.gid);
        re.push(React.createElement("tr", {
          "key": v.id
        }, React.createElement("td", null, v.id), React.createElement("td", null, this.getPublicClass(v["class"])), React.createElement("td", null, v.game_id), React.createElement("td", null, v.priority), React.createElement("td", null, v.typ), React.createElement("td", null, v.title), React.createElement("td", null, v.begin), React.createElement("td", null, v.end), React.createElement("td", null, this.getStateString(v)), React.createElement("td", {
          "className": 'row-flex row-flex-middle row-flex-start'
        }, React.createElement(NewSendModal.SysPublicModal, Object.assign({}, this.props, {
          "ref": "SysPublicModal" + v.id,
          "id": v.id,
          "modal_name": "sds",
          "key": v.id,
          "on_loaded": ((function(_this) {
            return function() {
              return _this.Refersh(0.3);
            };
          })(this)),
          "priority": v.priority,
          "typ": v.typ,
          "start_time": v.begin,
          "end_time": v.end,
          "state": v.state,
          "title": v.title,
          "body": v.body,
          "class": v["class"],
          "lang": v.lang,
          "multi_lang": v.multi_lang,
          "props":this.props.timeId,
        })), React.createElement(boot.Button, {
          "bsStyle": 'danger',
          "disabled": false,
          "onClick": this.activityPublic(v.id)
        }, "发布"), React.createElement(boot.Button, {
          "bsStyle": 'danger',
          "disabled": false,
          "onClick": this.modSendModal(v.id)
        }, "修改"), React.createElement(boot.Button, {
          "bsStyle": 'danger',
          "disabled": false,
          "onClick": this.del(v.id)
        }, "删除"))));
      }
      return re;
    },
    getRewardList: function() {
      if (this.state.is_loading) {
        return React.createElement("i", {
          "className": "anticon anticon-loading"
        });
      }
      return React.createElement(boot.Table, Object.assign({}, this.props, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }), React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "公告ID"), React.createElement("th", null, "种类"), React.createElement("th", null, "公告大区"), React.createElement("th", null, "优先级"), React.createElement("th", null, "类型"), React.createElement("th", null, "公告标题"), React.createElement("th", null, "开始时间"), React.createElement("th", null, "结束时间"), React.createElement("th", null, "状态"), React.createElement("th", null, "操作"))), React.createElement("tbody", null, this.getAllInfo(this.state.notices)));
    },
    render: function() {
      return React.createElement("div", Object.assign({}, this.props, {
        "className": "ant-form-inline"
      }), this.getRewardList());
    }
  });

  module.exports = PublicTable;

}).call(this);
