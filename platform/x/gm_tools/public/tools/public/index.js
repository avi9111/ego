// Generated by CoffeeScript 1.12.7
(function() {
  var AccountKeyInput, Api, EndpointModal, NewSendModal, NoticeTable, React, SysPublic, antd;

  antd = require('antd');

  React = require('react');

  AccountKeyInput = require('../../common/account_input');

  NoticeTable = require('./public_table');

  NewSendModal = require('./new_public');

  EndpointModal = require('./endpoint');

  Api = require('../api/api_ajax');

  SysPublic = React.createClass({displayName: "SysPublic",
    getInitialState: function() {
      return {
        select_server: this.props.curr_server,
        player_to_send: "",
        version: "",
        gid: "",
        loadstat: {}
      };
    },
    enterLoading: function(t, cb) {
      var loadstat;
      loadstat = this.state.loadstat;
      loadstat[t] = 1;
      this.setState({
        loadstat: loadstat
      });
      cb();
    },
    leaveLoading: function(t) {
      var loadstat;
      loadstat = this.state.loadstat;
      loadstat[t] = 2;
      return this.setState({
        loadstat: loadstat
      });
    },
    getLoadingState: function(t) {
      if (this.state.loadstat[t] === 1) {
        return 'ant-btn-loading';
      } else {
        return '';
      }
    },
    getTable: function() {
      if (this.state.loadstat === 0) {
        return React.createElement("div", null, "点击按钮加载ID");
      }
      return React.createElement(NoticeTable, Object.assign({}, this.props, {
        "ref": "notice_table",
        "server_id": "sid",
        "account_id": "ac",
        "version": this.state.version,
        "gid": this.state.gid,
        "on_loaded": ((function(_this) {
          return function() {
            return _this.leaveLoading("table");
          };
        })(this))
      }));
    },
    getSendModal: function() {
      return React.createElement(NewSendModal.NewModal, Object.assign({}, this.props, {
        "ref": "notice_send",
        "modal_name": "添加公告",
        "server_id": "sid",
        "account_id": "ac",
        "version": this.state.version,
        "gid": this.state.gid,
        "on_loaded": this.OnSend
      }));
    },
    getMkEndpointModal: function() {
      return React.createElement(EndpointModal, Object.assign({}, this.props, {
        "ref": "endpoint",
        "modal_name": "修改Endpoint",
        "server_id": "sid",
        "account_id": "ac",
        "version": this.state.version,
        "gid": this.state.gid,
        "on_loaded": (function() {
          return null;
        })
      }));
    },
    handleVersionChange: function(event) {
      this.setState({
        version: event.target.value
      });
      console.log(this.state);
      return this.OnSend();
    },
    handleGidChange: function(event) {
      this.setState({
        gid: event.target.value
      });
      console.log(this.state);
      return this.OnSend();
    },
    handleServerChange: function(data) {
      console.log(data);
      this.setState({
        select_server: data
      });
      return setTimeout(this.OnSend, 100);
    },
    handleUserChange: function(data) {
      console.log(data);
      if (data === "") {
        data = "请输入玩家Id";
      }
      return this.setState({
        player_to_send: data
      });
    },
    OnSend: function() {
      console.log("SendOver");
      if (this.refs.notice_table != null) {
        this.refs.notice_table.Refersh(0);
      }
      if (this.refs.endpoint != null) {
        return this.refs.endpoint.Refersh(0);
      }
    },
    getServerName: function() {
      if (this.state.select_server != null) {
        return this.state.select_server.name;
      } else {
        return "";
      }
    },
    updateTable: function() {
      if (this.refs.notice_table != null) {
        this.refs.notice_table.Refersh(1);
      } else {
        this.leaveLoading("table");
      }
      return console.log(this.state);
    },
    releasePublic: function() {
      var api, src;
      api = new Api();
      src = "releaseSysPublic";
      if (this.state.gid >= 200) {
        src = "releaseSysPublicToRelease";
      }
      return api.Typ(src).ServerID("s").AccountID("a").Key(this.props.curr_key).Params(this.state.gid, this.state.version).Do((function(_this) {
        return function(result) {
          return _this.leaveLoading("release");
        };
      })(this));
    },
    render: function() {
      return React.createElement("div", null, React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "大区:"), React.createElement("input", {
        "className": "ant-input",
        "style": {
          width: 100
        },
        "onChange": this.handleGidChange
      }), React.createElement("div", null, "版本:"), React.createElement("input", {
        "className": "ant-input",
        "style": {
          width: 100
        },
        "onChange": this.handleVersionChange
      }), React.createElement(antd.Button, {
        "className": 'ant-btn ant-btn-primary ' + this.getLoadingState("table"),
        "onClick": ((function(_this) {
          return function() {
            return _this.enterLoading("table", _this.updateTable.bind(_this));
          };
        })(this))
      }, "加载公告"), React.createElement(antd.Button, {
        "className": 'ant-btn ant-btn-primary ' + this.getLoadingState("release"),
        "onClick": ((function(_this) {
          return function() {
            return _this.enterLoading("release", _this.releasePublic.bind(_this));
          };
        })(this))
      }, "发布公告"), this.getSendModal(), this.getMkEndpointModal(), ), React.createElement("hr", null), this.getTable());
    }
  });

  module.exports = SysPublic;

}).call(this);
