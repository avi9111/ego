// Generated by CoffeeScript 1.12.7
(function() {
  var Api, CSVInput, EndpointModal, EndpointLittle,InputNumber, MkEndpointModal, Modal, React, RewardMaker, TimeUtil, antd, gzipSizeInit, timeoutTimeInit, tokenTimeInit, SysPublic;

  CSVInput = require('../../common/csv_input');

  antd = require('antd');

  Api = require('../api/api_ajax');

  Modal = antd.Modal;

  InputNumber = antd.InputNumber;

  RewardMaker = require('../../common/reward_maker');

  TimeUtil = require('../util/time');

  React = require('react');

  tokenTimeInit = "129600";

  timeoutTimeInit = "10";

  gzipSizeInit = "1024";

  EndpointModal = React.createClass({displayName: "EndpointModal",
    getInitialState: function() {
      var ref, ref1, ref2;
      return {
        endpoint_server: this.props.endpoint_server,
        endpoint_chat: this.props.endpoint_chat,
        data_ver: this.props.data_ver,
        etcd_data_ver: this.props.etcd_data_ver,
        bundle_ver: this.props.bundle_ver,
        etcd_bundle_ver: this.props.etcd_bundle_ver,
        whitelistpwd: this.props.whitelistpwd,
        biOption: this.props.biOption,
        tokenTime: (ref = this.props.tokenTime) != null ? ref : tokenTimeInit,
        timeoutTime: (ref1 = this.props.timeoutTime) != null ? ref1 : timeoutTimeInit,
        prUrl: this.props.prUrl,
        payUrls: this.props.payUrls,
        gzip_size: (ref2 = this.props.gzip_size) != null ? ref2 : gzipSizeInit,
        data_min: this.props.data_min,
        bundle_min: this.props.bundle_min,
        etcd_data_min: this.props.etcd_data_min,
        etcd_bundle_min: this.props.etcd_bundle_min
      };
    },
    ShowModal: function() {
      return this.setState({
        visible: true
      });
    },
    handleOk: function() {
      this.setState({
        loading: true
      });
      this.setState({
        loading: false,
        visible: false
      });
      return this.send();
    },
    handleCancel: function() {
      return this.setState({
        visible: false
      });
    },


    SetData: function(data) {
      return this.setState({
        endpoint_server: data.server,
        endpoint_chat: data.chat,
        data_ver: data.ver,
        etcd_data_ver: data.ver_etcd,
        bundle_ver: data.bundle_ver,
        etcd_bundle_ver: data.bundle_ver_etcd,
        whitelistpwd: data.whitelistpwd,
        biOption: data.biOption,
        tokenTime: data.tokenTime,
        timeoutTime: data.timeoutTime,
        prUrl: data.pr_url,
        payUrls: data.pay_urls,
        gzip_size: data.gzip_size,
        data_min: data.data_min,
        bundle_min: data.bundle_min,
        etcd_data_min: data.etcd_data_min,
        etcd_bundle_min: data.etcd_bundle_min
      });
    },
    send: function() {
      var api, gzipSize, gzip_size, timeoutTime, tokenTime;
      console.log(this.state);
      console.log(this.props);
      tokenTime = this.state.tokenTime;
      timeoutTime = this.state.timeoutTime;
      gzipSize = this.state.gzip_size;
      if (tokenTime === "") {
        tokenTime = tokenTimeInit;
      }
      if (timeoutTime === "") {
        timeoutTime = timeoutTimeInit;
      }
      if (gzipSize === "") {
        gzip_size = gzipSizeInit;
      }
      api = new Api();
      return api.Typ("setEndpoint").ServerID(this.props.server_id).AccountID(this.props.id).Key(this.props.curr_key).Params(this.props.gid, this.props.version, this.state.endpoint_server, this.state.endpoint_chat, this.state.data_ver, this.state.whitelistpwd, this.state.biOption, tokenTime, timeoutTime, this.state.bundle_ver, this.state.etcd_bundle_ver, this.state.prUrl, this.state.payUrls, gzipSize, this.state.data_min, this.state.bundle_min).Do((function(_this) {
        return function(result) {
          var bv, dv;
          console.log("on_loaded");
          console.log(result);
          _this.props.on_loaded();
          dv = _this.state.data_ver;
          bv = _this.state.bundle_ver;
          return _this.setState({
            etcd_data_ver: dv,
            etcd_bundle_ver: bv
          });
        };
      })(this));
    },
    handleServerEndpointChange: function(event) {
      return this.setState({
        endpoint_server: event.target.value,
      });
    },
    handleChatEndpointChange: function(event) {
      return this.setState({
        endpoint_chat: event.target.value
      });
    },
    handleDataVerChange: function(event) {
      return this.setState({
        data_ver: event.target.value
      });
    },
    handleBundleVerChange: function(event) {
      return this.setState({
        bundle_ver: event.target.value
      });
    },
    handleWhitelistpwdChange: function(event) {
      return this.setState({
        whitelistpwd: event.target.value
      });
    },
    handleBIOptionChange: function(event) {
      return this.setState({
        biOption: event.target.value
      });
    },
    handleTokenTimeChange: function(event) {
      return this.setState({
        tokenTime: event.target.value
      });
    },
    handleTimeoutTimeChange: function(event) {
      return this.setState({
        timeoutTime: event.target.value
      });
    },
    handlePrUrlChange: function(event) {
      return this.setState({
        prUrl: event.target.value
      });
    },
    handlePayUrlsChange: function(v, str, is_right) {
      return this.setState({
        payUrls: event.target.value
      });
    },
    handleGZIPSizeChange: function(event) {
      return this.setState({
        gzip_size: event.toString()
      });
    },
    handleDataMinChange: function(event) {
      return this.setState({
        data_min: event.target.value
      });
    },
    handleBundleMinChange: function(event) {
      return this.setState({
        bundle_min: event.target.value
      });
    },
    handleGidLittleChange: function(event) {
       this.setState({
          ggid: event.target.value
        });
          console.log(this.state.ggid);

    },
    handleVersionLittleChange: function(event) {
       this.setState({
          gversion: event.target.value
       });
          console.log(this.state.gversion);


     },
    handleCopy:function () {
        var api;
        api = new Api();
        return api.Typ("getEndpoint").ServerID(this.props.server_id).AccountID(this.props.id).Key(this.props.curr_key).Params(this.state.ggid, this.state.gversion).Do((function(_this) {
            return function(result, json, status) {
                console.log("getEndpoint");
                console.log(result);
                console.log(json);
                if (status === 200) {
                        return _this.SetData(json);
                } else {
                    return _this.setState({
                        cannot: true
                    });
                }
            };
         })(this));
    },
    render: function() {
      var base;
      return React.createElement(Modal, Object.assign({}, this.props, {
        "visible": this.state.visible,
        "title": this.props.modal_name,
        "onOk": this.handleOk,
        "onCancel": this.handleCancel,
        "width": 700,
        "footer": [

          React.createElement("button", {
            "key": "back",
            "className": "ant-btn",
            "onClick": this.handleCancel
          }, "返 回"),
            React.createElement("button", {
            "key": "submit",
            "className": "ant-btn ant-btn-primary",
            "onClick": this.handleOk
          }, "提 交", React.createElement("i", {
            "className": 'anticon anticon-loading' + (typeof (base = this.state).loading === "function" ? base.loading({
              '': 'hide'
            }) : void 0)
          }))
        ]
      }), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "服务器Endpoint:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.endpoint_server,
        "onChange": this.handleServerEndpointChange,
         "onClick": this.handleCopy
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "聊天ChatEndpoint:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.endpoint_chat,
        "onChange": this.handleChatEndpointChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "Data Version:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.data_ver,
        "onChange": this.handleDataVerChange
      }), React.createElement("div", null, "Data Version by Etcd:", this.state.etcd_data_ver)), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "Data Min:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.data_min,
        "onChange": this.handleDataMinChange
      }), React.createElement("div", null, "Data Min by Etcd:", this.state.etcd_data_min)), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "Bundle Version:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.bundle_ver,
        "onChange": this.handleBundleVerChange
      }), React.createElement("div", null, "Bundle Version by Etcd:", this.state.etcd_bundle_ver)), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "Bundle Min:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.bundle_min,
        "onChange": this.handleBundleMinChange
      }), React.createElement("div", null, "Bundle Min by Etcd:", this.state.etcd_bundle_min)), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "whitelistpwd:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.whitelistpwd,
        "onChange": this.handleWhitelistpwdChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "大数据开关:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.biOption,
        "onChange": this.handleBIOptionChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "TokenTime(缺省129600):"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.tokenTime,
        "onChange": this.handleTokenTimeChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "TimeoutTime(缺省10):"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.timeoutTime,
        "onChange": this.handleTimeoutTimeChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "PrUrl"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.prUrl,
        "onChange": this.handlePrUrlChange
      })), React.createElement(CSVInput, Object.assign({}, this.props, {
        "title": "支付URL",
        "value": this.state.payUrls,
        "ref": "payurl",
        "can_cb": this.handlePayUrlsChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "GZIP Size(单位byte, 缺省1024):"), React.createElement(InputNumber, {
        "min": 0,
        "value": this.state.gzip_size,
        "onChange": this.handleGZIPSizeChange
      })),

          React.createElement("span", {
            "style":{
              marginLeft:5,
              marginTop:10,
                fontSize:16,
                lineHeight:2
            }
          }, "大区:"), React.createElement("input", {
              "className": "ant-input",
              "style": {
                  width: 100,
              },"onChange": this.handleGidLittleChange
          }),

          React.createElement("span", {"style":{
              marginLeft:5,
              marginTop:10,
              fontSize:16
          }}, "版本:"), React.createElement("input", {
              "className": "ant-input",
              "style": {
                  width: 100,
              },"onChange": this.handleVersionLittleChange
          }),React.createElement("button", {
              "key": "copy",
              "className": "ant-btn",
              "style": {
                  width: 100,
                 marginLeft:5
              },
              "onClick": this.handleCopy,
          }, "复制粘贴"),
          React.createElement("div", {
            "style":{
              fontSize:16
            },
          }, "说明:添加以前的版本大区号,然后点击复制粘贴按钮会帮助您填写详细信息,方便您对新大区版本信息的修改")


      );

    },



  });

  MkEndpointModal = React.createClass({displayName: "MkEndpointModal",
    getInitialState: function() {
      return {};
    },
    componentDidMount: function() {
      return this.Refersh(0);
    },
    Refersh: function(time_wait) {
      var api;
      this.setState({
        is_loading: true
      });
      if (time_wait != null) {
        setTimeout(this.Refersh, time_wait * 1000);
        return;
      }
      api = new Api();
      return api.Typ("getEndpoint").ServerID(this.props.server_id).AccountID(this.props.id).Key(this.props.curr_key).Params(this.props.gid, this.props.version).Do((function(_this) {
        return function(result, json, status) {
          console.log("getEndpoint");
          console.log(result);
          console.log(json);
          if (status === 200) {
            if ((json != null) && (_this.refs.modal != null)) {
              return _this.refs.modal.SetData(json);
            }
          } else {
            return _this.setState({
              cannot: true
            });
          }
        };
      })(this));
    },
    onclickshow: function() {
      this.Refersh(0);
      return this.refs.modal.ShowModal();
    },
    render: function() {
      return React.createElement("div", null, React.createElement(EndpointModal, Object.assign({}, this.props, {
        "id": "null",
        "ref": "modal"
      })), React.createElement("button", {
        "className": "ant-btn ant-btn-primary",
        "onClick": this.onclickshow
      }, this.props.modal_name));
    }
  });

  module.exports = MkEndpointModal;



}).call(this);






