// Generated by CoffeeScript 1.12.7
(function() {
  var Api, ClassPicker, DatePicker, InputNumber, LanguagePicker, Modal, MultiLangModal, MultiLangPicker, NewModal, Picker, RangePicker, React, RewardMaker, Select, SysPublicModal, TimeUtil, antd, langMap, multiLang;

  antd = require('antd');

  Api = require('../api/api_ajax');

  Modal = antd.Modal;

  DatePicker = antd.DatePicker;

  RangePicker = DatePicker.RangePicker;

  InputNumber = antd.InputNumber;

  RewardMaker = require('../../common/reward_maker');

  TimeUtil = require('../util/time');

  React = require('react');

  Select = antd.Select;

  multiLang = require('../../common/multi_lang');

  LanguagePicker = multiLang.LanguagePicker;

  MultiLangPicker = multiLang.MultiLangPicker;

  langMap = multiLang.langMap;

  MultiLangModal = multiLang.MultiLangModal;

  Picker = React.createClass({displayName: "Picker",
    handleChange: function(data) {
      return this.props.handleChange(data);
    },
    render: function() {
      return React.createElement(Select, {
        "defaultValue": this.props.defaultValue,
        "style": {
          width: 85
        },
        "onChange": this.handleChange
      }, React.createElement(Option, {
        "value": "Publics"
      }, "通常"), React.createElement(Option, {
        "value": "Maintaince"
      }, "维护"), React.createElement(Option, {
        "value": "Forceupdate"
      }, "强制更新"));
    }
  });

  ClassPicker = React.createClass({displayName: "ClassPicker",
    handleChange: function(data) {
      return this.props.handleChange(data);
    },
    render: function() {
      return React.createElement(Select, {
        "defaultValue": this.props.defaultValue,
        "style": {
          width: 85
        },
        "onChange": this.handleChange
      }, React.createElement(Option, {
        "value": 0
      }, "活动"), React.createElement(Option, {
        "value": 1
      }, "促销"), React.createElement(Option, {
        "value": 2
      }, "最新"), React.createElement(Option, {
        "value": 3
      }, "福利"), React.createElement(Option, {
        "value": 4
      }, "节日"), React.createElement(Option, {
        "value": 5
      }, "充值"), React.createElement(Option, {
        "value": 6
      }, "消耗"), React.createElement(Option, {
        "value": 7
      }, "热卖"), React.createElement(Option, {
        "value": 8
      }, "神将"), React.createElement(Option, {
        "value": 9
      }, "神装"), React.createElement(Option, {
        "value": 10
      }, "New"), React.createElement(Option, {
        "value": 11
      }, "Hot"), React.createElement(Option, {
        "value": 12
      }, "公告"), React.createElement(Option, {
        "value": 13
      }, "停机"), React.createElement(Option, {
        "value": 14
      }, "更新"), React.createElement(Option, {
        "value": 15
      }, "版本"));
    }
  });

  SysPublicModal = React.createClass({displayName: "SysPublicModal",
    getInitialState: function() {
      var end, key, propsLang, s, start, tempLang;
      start = this.props.start_time ? new Date(this.props.start_time * 1000) : new Date();
      end = this.props.end_time ? new Date(this.props.end_time * 1000) : new Date();
      propsLang = this.props.lang;
      tempLang = {};
      if (!this.IsJsonString(propsLang)) {
        for (key in langMap) {
          tempLang[key] = {
            title: "",
            body: ""
          };
        }
      } else {
        tempLang = JSON.parse(propsLang);
      }
      s = {
        loading: false,
        visible: false,
        title: this.props.title,
        body: this.props.body,
        start_time: start,
        end_time: end,
        gid: this.props.gid,
        priority: this.props.priority,
        typ: this.props.typ,
        "class": this.props["class"],
        language: tempLang,
        multi_lang: this.props.multi_lang
      };
      return s;
    },
    IsJsonString: function(jsonStr) {
      var err;
      if (jsonStr === "" || !jsonStr) {
        return false;
      }
      try {
        JSON.parse(jsonStr);
        return true;
      } catch (error) {
        err = error;
        return false;
      }
    },
    ShowModal: function() {
      return this.setState({
        visible: true
      });
    },
    handleOk: function() {
      this.setState({
        loading: true
      });
      this.setState({
        loading: false,
        visible: false
      });
      return this.send();
    },
    handleCancel: function() {
      return this.setState({
        visible: false
      });
    },
    send: function() {
      var api, day, end, end_day_time, hours, minutes, month, seconds, start, start_day_time, year;
      console.log(this.state);
      console.log(this.props);
      api = new Api();
      start = new Date(this.state.start_time);
      year = start.getFullYear();
      month = (start.getMonth() + 1).toString();
      day = start.getDate().toString();
      hours = (start.getHours()).toString();
      minutes = start.getMinutes().toString();
      seconds = start.getSeconds().toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      if (day.length === 1) {
        day = '0' + day;
      }
      if (hours.length === 1) {
        hours = '0' + hours;
      }
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      start_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
      end = new Date(this.state.end_time);
      year = end.getFullYear();
      month = (end.getMonth() + 1).toString();
      day = end.getDate().toString();
      hours = (end.getHours()).toString();
      minutes = end.getMinutes().toString();
      seconds = end.getSeconds().toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      if (day.length === 1) {
        day = '0' + day;
      }
      if (hours.length === 1) {
        hours = '0' + hours;
      }
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      end_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
      return api.Typ("sendSysPublic").ServerID(this.props.server_id).AccountID(this.props.id).Key(this.props.curr_key).Params(this.props.gid, this.state.priority, this.state.typ, start_day_time, end_day_time, "0", this.state.title, this.state.body, this.props.version, this.state["class"], JSON.stringify(this.state.language), this.state.multi_lang).Do((function(_this) {
        return function(result) {
          _this.setState({
            notices: JSON.parse(result),
            is_loading: false
          });
          console.log("on_loaded");
          return _this.props.on_loaded();
        };
      })(this));
    },
    getTimeToStr: function(date, format) {
      var rs;
      console.log(date);
      rs = TimeUtil.DateFormat(date, format);
      console.log(rs);
      return rs;
    },
    handleStartStopChange: function(value) {
      console.log('From: ', value[0], ', to: ', value[1]);
      this.setState({
        start_time: value[0],
        end_time: value[1]
      });
    },
    handlePriorityChange: function(event) {
      return this.setState({
        priority: parseInt(event.target.value, 10)
      });
    },
    handleTypChange: function(value) {
      return this.setState({
        typ: parseInt(value, 10)
      });
    },
    handleClassChange: function(value) {
      return this.setState({
        "class": value
      });
    },
    handleLangChange: function(value) {
      return this.setState({
        title: value.title,
        body: value.body,
        language: value.language,
        multi_lang: value.multi_lang
      });
    },
    render: function() {
      var base;
      return React.createElement(Modal, Object.assign({}, this.props, {
        "visible": this.state.visible,
        "title": this.props.modal_name,
        "onOk": this.handleOk,
        "onCancel": this.handleCancel,
        "width": 700,
        "footer": [
          React.createElement("button", {
            "key": "back",
            "className": "ant-btn",
            "onClick": this.handleCancel
          }, "返 回"), React.createElement("button", {
            "key": "submit",
            "className": "ant-btn ant-btn-primary",
            "onClick": this.handleOk
          }, "提 交", React.createElement("i", {
            "className": 'anticon anticon-loading' + (typeof (base = this.state).loading === "function" ? base.loading({
              '': 'hide'
            }) : void 0)
          }))
        ]
      }), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "种类:"), React.createElement(Picker, {
        "defaultValue": this.state["class"],
        "handleChange": this.handleClassChange
      }), React.createElement("div", null, "优先级:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.priority,
        "style": {
          width: 70
        },
        "onChange": this.handlePriorityChange
      }), React.createElement("div", null, "类型:"), React.createElement(ClassPicker, {
        "defaultValue": this.state.typ,
        "handleChange": this.handleTypChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "时间:"), React.createElement(RangePicker, {
        "showTime": true,
        "format": "yyyy/MM/dd HH:mm",
        "onChange": this.handleStartStopChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement(MultiLangModal, Object.assign({}, this.props, {
        "title": this.state.title,
        "body": this.state.body,
        "multi_lang": this.state.multi_lang,
        "lang": this.state.language,
        "handleChange": this.handleLangChange
      }))));
    }
  });

  NewModal = React.createClass({displayName: "NewModal",
    getInitialState: function() {
      return {};
    },
    render: function() {
      return React.createElement("div", null, React.createElement(SysPublicModal, Object.assign({}, this.props, {
        "id": "null",
        "ref": "modal"
      })), React.createElement("button", {
        "className": "ant-btn ant-btn-primary",
        "onClick": ((function(_this) {
          return function() {
            return _this.refs.modal.ShowModal();
          };
        })(this))
      }, this.props.modal_name));
    }
  });

  module.exports = {
    NewModal: NewModal,
    SysPublicModal: SysPublicModal
  };

}).call(this);
