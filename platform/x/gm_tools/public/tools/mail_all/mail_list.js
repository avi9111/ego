// Generated by CoffeeScript 1.12.7
(function() {
  var $, Api, BatchMailResult, Label, Loading, MailList, React, Table, antd, boot, tag_2_str, time_2_str;

  antd = require('antd');

  boot = require('react-bootstrap');

  Loading = require('react-loading');

  React = require('react');

  Table = boot.Table;

  Api = require('../api/api_ajax');

  Label = boot.Label;

  $ = require('jquery');

  time_2_str = function(t) {
    var d, res;
    d = new Date(t * 1000);
    res = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + ' ' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();
    return res;
  };

  tag_2_str = function(t) {
    var temp;
    if (!t) {
      return '';
    }
    temp = JSON.parse(t);
    return ["IAPID: ", temp.go, "count: ", temp.a];
  };

  MailList = React.createClass({displayName: "MailList",
    getInitialState: function() {
      return {
        mails: [],
        is_loading: true
      };
    },
    componentDidMount: function() {
      return this.Refersh(0);
    },
    Refersh: function(time_wait) {
      this.setState({
        is_loading: true
      });
      if ((time_wait != null) && time_wait > 0) {
        setTimeout(this.Refersh, time_wait * 1000);
        return;
      }
      return $.get("../api/v1/mail/" + this.props.server_name + "/" + this.props.mail_name, (function(_this) {
        return function(result) {
          console.log(result);
          return _this.setState({
            mails: JSON.parse(result),
            is_loading: false
          });
        };
      })(this));
    },
    getRewardInf: function(ids, cs) {
      var idx, item_id, re;
      re = [];
      for (idx in ids) {
        item_id = ids[idx];
        re.push(React.createElement("tr", {
          "key": idx
        }, React.createElement("td", null, item_id), React.createElement("td", null, cs[idx])));
      }
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "ItemID"), React.createElement("th", null, "数量"))), React.createElement("tbody", null, re));
    },
    del: function(id) {
      return (function(_this) {
        return function() {
          var api;
          api = new Api();
          return api.Typ("delMail").ServerID(_this.props.server_name).AccountID(_this.props.mail_name).Key(_this.props.curr_key).Params(id).Do(function(result) {
            console.log("on_deled " + id);
            return _this.Refersh(0.3);
          });
        };
      })(this);
    },

      getLocalTime: function(i) {
        if (typeof i !== 'number') return;
        var d = new Date();
        var len = d.getTime();
        var offset = d.getTimezoneOffset() * 60000;
        var utcTime = len + offset;
        return new Date(utcTime + 3600000 * i);
    },
    getStateLabel: function(v) {

      var begin_t, end_t,now_t;
      if (this.props.is_personal) {
        if (v.IsRead) {
          return React.createElement(Label, {
            "bsStyle": "warning"
          }, "已阅读");
        }
        if (v.IsGetted) {
          return React.createElement(Label, {
            "bsStyle": "default"
          }, "已获取");
        }
        return React.createElement(Label, {
          "bsStyle": "success"
        }, "未获取");
      } else {
          now_t = this.getLocalTime(this.props.curr_time);
          begin_t = new Date(v.TimeBeginString);
          end_t = new Date(v.TimeEndString);
        if ((begin_t <= now_t && now_t < end_t )) {
          return React.createElement(Label, {
            "bsStyle": "success"
          }, "已发布");
        }
        if (now_t >= end_t) {
          return React.createElement(Label, {
            "bsStyle": "default"
          }, "已过期");
        }
        if (now_t <  begin_t) {
          return React.createElement(Label, {
            "bsStyle": "warning"
          }, "未到期");
        }
      }
    },
    getAllInfo: function(data) {
      var k, param0, param1, re, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in data) {
        v = data[k];
        if (v.Param === null) {
          param0 = "gm";
          param1 = "gm";
        } else {
          param0 = v.Param[0];
          param1 = v.Param[1];
        }
        re.push(React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, v.Idx), React.createElement("td", null, param0), React.createElement("td", null, param1), React.createElement("td", null, time_2_str(v.TimeBegin)), React.createElement("td", null, time_2_str(v.TimeEnd)), React.createElement("td", null, this.getStateLabel(v)), React.createElement("td", null, this.getRewardInf(v.ItemId, v.Count)), React.createElement("td", null, tag_2_str(v.Tag)), React.createElement("td", {
          "className": 'row-flex row-flex-middle row-flex-start'
        }, React.createElement(boot.Button, {
          "bsStyle": 'danger',
          "disabled": false,
          "onClick": this.del(v.Idx)
        }, "删除"))));
      }
      return re;
    },
    getRewardList: function() {
      if (this.state.is_loading) {
        return React.createElement(Loading, {
          "type": 'spin',
          "height": "200",
          "width": "200",
          "color": '#61dafb'
        });
      }
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "ID"), React.createElement("th", null, "标题"), React.createElement("th", null, "信息"), React.createElement("th", null, "开始时间"), React.createElement("th", null, "结束时间"), React.createElement("th", null, "状态"), React.createElement("th", null, "奖励"), React.createElement("th", null, "奖励信息"), React.createElement("th", null, "操作"))), React.createElement("tbody", null, this.getAllInfo(this.state.mails)));
    },
    render: function() {
      return React.createElement("div", {
        "className": "ant-form-inline"
      }, this.getRewardList());
    }
  });

  BatchMailResult = React.createClass({displayName: "BatchMailResult",
    ResultMap: {
      "1": "时间格式错误",
      "2": "奖励格式错误",
      "3": "ID必须是整数",
      "4": "不存在的服务器",
      "5": "服务器发送失败",
      "6": "uid错误"
    },
    getInitialState: function() {
      return {
        count: 0,
        mails: []
      };
    },
    Refresh: function(data) {
      return this.setState({
        mails: data.FailArr,
        count: data.SuccessCount
      });
    },
    getAllInfo: function(data) {
      var k, re, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in data) {
        v = data[k];
        re.push(React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, v.Id), React.createElement("td", null, React.createElement(Label, {
          "bsStyle": "danger"
        }, "失败")), React.createElement("td", null, this.ResultMap[v.FailCode])));
      }
      return re;
    },
    getResultList: function() {
      if (this.state.is_loading) {
        return React.createElement(Loading, {
          "type": 'spin',
          "height": "200",
          "width": "200",
          "color": '#61dafb'
        });
      }
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "ID"), React.createElement("th", null, "结果"), React.createElement("th", null, "信息"))), React.createElement("tbody", null, this.getAllInfo(this.state.mails)));
    },
    render: function() {
      return React.createElement("div", {
        "className": "ant-form-inline"
      }, React.createElement("div", null, React.createElement(Label, {
        "bsStyle": "success"
      }, "成功：", this.state.count), React.createElement(Label, {
        "bsStyle": "danger"
      }, "失败：", (Object.keys(this.state.mails).length))), React.createElement("hr", null), this.getResultList());
    }
  });

  module.exports = {
    "MailList": MailList,
    "BatchMailResult": BatchMailResult
  };

}).call(this);
