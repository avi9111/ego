// Generated by CoffeeScript 1.12.7
(function() {
  var $, AccountList, Checkbox, DatePicker, Modal, MultiLangModal, NewMailAllSendModal, RangePicker, React, RewardMaker, antd, multiLang;

  antd = require('antd');

  React = require('react');

  Modal = antd.Modal;

  DatePicker = antd.DatePicker;

  RangePicker = DatePicker.RangePicker;

  Checkbox = antd.Checkbox;

  $ = require('jquery');

  RewardMaker = require('../../common/reward_maker');

  AccountList = require('../../common/account_list');

  multiLang = require('../../common/multi_lang');

  MultiLangModal = multiLang.MultiLangModal;

  NewMailAllSendModal = React.createClass({displayName: "NewMailAllSendModal",
    getInitialState: function() {
      return {
        loading: false,
        visible: false,
        title: null,
        info: null,
        start_time: null,
        end_time: null,
        c_start_time: null,
        c_end_time: null,
        ver: null,
        rewards: [],
        accounts: [],
        send_all_ser: false,
        language: "",
        multi_lang: "",
        profile: this.props.mail_name
      };
    },
    showModal: function() {
      return this.setState({
        visible: true
      });
    },
    handleOk: function() {
      this.setState({
        loading: true
      });
      this.setState({
        loading: false,
        visible: false
      });
      return this.send();
    },
    handleCancel: function() {
      return this.setState({
        visible: false
      });
    },
    send: function() {
      var c_end_day_time, c_start_day_time, count_ar, day, end_day_time, h_time, hours, i, item_id_ar, len, minutes, month, ndata, ref, reward, seconds, self, start_day_time, year;
      console.log(this.state);
      item_id_ar = [];
      count_ar = [];
      ref = this.state.rewards;
      for (i = 0, len = ref.length; i < len; i++) {
        reward = ref[i];
        item_id_ar.push(reward.Id);
        count_ar.push(reward.Count);
      }
      h_time = this.state.start_time;
      year = h_time.getFullYear();
      month = (h_time.getMonth() + 1).toString();
      day = h_time.getDate().toString();
      hours = (h_time.getHours()).toString();
      minutes = h_time.getMinutes().toString();
      seconds = h_time.getSeconds().toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      if (day.length === 1) {
        day = '0' + day;
      }
      if (hours.length === 1) {
        hours = '0' + hours;
      }
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      start_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
      h_time = this.state.end_time;
      year = h_time.getFullYear();
      month = (h_time.getMonth() + 1).toString();
      day = h_time.getDate().toString();
      hours = (h_time.getHours()).toString();
      minutes = h_time.getMinutes().toString();
      seconds = h_time.getSeconds().toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      if (day.length === 1) {
        day = '0' + day;
      }
      if (hours.length === 1) {
        hours = '0' + hours;
      }
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      end_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
      ndata = {
        "Info": this.state.info,
        "Title": this.state.title,
        "ItemId": item_id_ar,
        "Count": count_ar,
        "TimeBegin": parseInt(this.state.start_time.getTime() / 1000, 10),
        "TimeBeginString": start_day_time,
        "TimeEnd": parseInt(this.state.end_time.getTime() / 1000, 10),
        "TimeEndString": end_day_time,
        "Idx": parseInt(new Date().getTime() / 1000, 10),
        "CTimeBegin": 0,
        "CTimeEnd": 0,
        "Accounts": this.state.accounts,
        "SendAllSer": this.state.send_all_ser,
        "Lang": JSON.stringify(this.state.language),
        "MultiLang": this.state.multi_lang
      };
      if (this.state.c_start_time != null) {
        h_time = this.state.c_start_time;
        year = h_time.getFullYear();
        month = (h_time.getMonth() + 1).toString();
        day = h_time.getDate().toString();
        hours = (h_time.getHours()).toString();
        minutes = h_time.getMinutes().toString();
        seconds = h_time.getSeconds().toString();
        if (month.length === 1) {
          month = '0' + month;
        }
        if (day.length === 1) {
          day = '0' + day;
        }
        if (hours.length === 1) {
          hours = '0' + hours;
        }
        if (minutes.length === 1) {
          minutes = '0' + minutes;
        }
        if (seconds.length === 1) {
          seconds = '0' + seconds;
        }
        c_start_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
        ndata["CTimeBegin"] = parseInt(this.state.c_start_time / 1000, 10);
        ndata["CTimeBeginString"] = c_start_day_time;
      }
      if (this.state.c_end_time != null) {
        h_time = this.state.c_end_time;
        year = h_time.getFullYear();
        month = (h_time.getMonth() + 1).toString();
        day = h_time.getDate().toString();
        hours = (h_time.getHours()).toString();
        minutes = h_time.getMinutes().toString();
        seconds = h_time.getSeconds().toString();
        if (month.length === 1) {
          month = '0' + month;
        }
        if (day.length === 1) {
          day = '0' + day;
        }
        if (hours.length === 1) {
          hours = '0' + hours;
        }
        if (minutes.length === 1) {
          minutes = '0' + minutes;
        }
        if (seconds.length === 1) {
          seconds = '0' + seconds;
        }
        c_end_day_time = year + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
        ndata["CTimeEnd"] = parseInt(this.state.c_end_time / 1000, 10);
        ndata["CTimeEndString"] = c_end_day_time;
      }
      if ((this.state.ver != null) && this.state.ver !== "") {
        ndata["Tag"] = JSON.stringify({
          "ver": this.state.ver
        });
      }
      console.log(ndata);
      self = this;
      return $.ajax({
        url: "../api/v1/mail/" + this.props.server_name + "/" + this.props.mail_name,
        dataType: "json",
        type: "POST",
        data: JSON.stringify(ndata),
        contentType: "application/json; charset=utf-8",
        complete: function(xhr, status) {
          var rc;
          rc = {
            status: xhr.status,
            json: xhr.responseJSON
          };
          console.log(rc);
          return self.props.onSend();
        }
      });
    },
    handleStartStopChange: function(value) {
      console.log('handleStartStopChange From: ', value[0], ', to: ', value[1]);
      this.setState({
        start_time: new Date(value[0].getTime()),
        end_time: new Date(value[1].getTime())
      });
    },
    handleCreatAccStartStopChange: function(value) {
      console.log('handleCreatAccStartStopChange From: ', value[0], ', to: ', value[1]);
      if (value[0] != null) {
        this.setState({
          c_start_time: new Date(value[0].getTime())
        });
      } else {
        this.setState({
          c_start_time: null
        });
      }
      if (value[1] != null) {
        this.setState({
          c_end_time: new Date(value[1].getTime())
        });
      } else {
        this.setState({
          c_end_time: null
        });
      }
    },
    handleTitleChange: function(event) {
      return this.setState({
        title: event.target.value
      });
    },
    handleInfoChange: function(event) {
      return this.setState({
        info: event.target.value
      });
    },
    handleVerChange: function(event) {
      return this.setState({
        ver: event.target.value
      });
    },
    handleRewardChange: function(crewards) {
      this.setState({
        rewards: crewards
      });
      console.log("handleRewardChange");
      return console.log(this.state);
    },
    handleLangChange: function(value) {
      return this.setState({
        title: value.title,
        info: value.body,
        language: value.language,
        multi_lang: value.multi_lang
      });
    },
    onAccountListChange: function(caccounts) {
      this.setState({
        accounts: caccounts
      });
      console.log("onAccountListChange");
      return console.log(this.state);
    },
    onSendAllServer: function(e) {
      return this.setState({
        send_all_ser: e.target.checked
      });
    },
    render: function() {
      var base;
      return React.createElement("div", null, React.createElement("button", {
        "className": "ant-btn ant-btn-primary",
        "onClick": this.showModal
      }, this.props.modal_name), React.createElement(Modal, {
        "ref": "modal",
        "visible": this.state.visible,
        "title": this.props.modal_name,
        "onOk": this.handleOk,
        "onCancel": this.handleCancel,
        "width": 700,
        "footer": [
          React.createElement("button", {
            "key": "back",
            "className": "ant-btn",
            "onClick": this.handleCancel
          }, "返 回"), React.createElement("button", {
            "key": "submit",
            "className": "ant-btn ant-btn-primary",
            "onClick": this.handleOk
          }, "提 交", React.createElement("i", {
            "className": 'anticon anticon-loading' + (typeof (base = this.state).loading === "function" ? base.loading({
              '': 'hide'
            }) : void 0)
          }))
        ]
      }, React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "时间:"), React.createElement(RangePicker, {
        "showTime": true,
        "format": "yyyy/MM/dd HH:mm",
        "onChange": this.handleStartStopChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement(MultiLangModal, {
        "handleChange": this.handleLangChange
      })), React.createElement("p", null, "奖励:（VI_HC类型的不能超过500）"), React.createElement(RewardMaker, {
        "onChange": this.handleRewardChange
      }), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "邮件限定版本(不填则省略):"), React.createElement("input", {
        "className": "ant-input ",
        "onChange": this.handleVerChange
      })), React.createElement("div", null, React.createElement("div", null, "玩家注册时间限制(只有在此时间内注册的玩家能见到邮件):"), React.createElement(RangePicker, {
        "showTime": true,
        "format": "yyyy/MM/dd HH:mm",
        "onChange": this.handleCreatAccStartStopChange
      }), React.createElement("div", null, "玩家ID限制(只有在列表中的玩家能见到邮件):"), React.createElement(AccountList, {
        "onChange": this.onAccountListChange
      })), React.createElement("div", null, React.createElement(Checkbox, {
        "onChange": this.onSendAllServer
      }, "发给全区所有服务器 "), "发给全区所有服务器 （需要勾选一个此大区的服务器）")));
    }
  });

  module.exports = NewMailAllSendModal;

}).call(this);
