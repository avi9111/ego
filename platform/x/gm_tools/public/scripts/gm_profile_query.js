// Generated by CoffeeScript 1.12.7
(function() {
  var $, AccountKeyInput, Button, ButtonToolbar, DropdownButton, GameAvatarExpInfo, GameAvatarExpModifyModal, GameCorpInfo, GameCorpModifyModal, GameCurrencyInfo, GameEnergyInfo, GameEnergyModifyModal, GameHCModifyModal, GameHardCurrencyInfo, GameSCModifyModal, GameServerList, GameStageInfo, GameStageModifyModal, InfoMakers, Input, JsonMod, ListGroup, ListGroupItem, MenuItem, Modal, ModalTrigger, Nav, NavItem, Navbar, NumInput, ProfileInfo, ProfileModify, ProfileQuery, React, ReactBootstrap, RegIM, Table, getAvataName, getHcName, getScName, mkJsonMod, mkModifyModel;

  React = require('react');

  ReactBootstrap = require('react-bootstrap');

  $ = require('jquery');

  ButtonToolbar = ReactBootstrap.ButtonToolbar;

  Button = ReactBootstrap.Button;

  MenuItem = ReactBootstrap.MenuItem;

  DropdownButton = ReactBootstrap.DropdownButton;

  Table = ReactBootstrap.Table;

  ModalTrigger = ReactBootstrap.ModalTrigger;

  Modal = ReactBootstrap.Modal;

  Navbar = ReactBootstrap.Navbar;

  Nav = ReactBootstrap.Nav;

  NavItem = ReactBootstrap.NavItem;

  Input = ReactBootstrap.Input;

  ListGroup = ReactBootstrap.ListGroup;

  ListGroupItem = ReactBootstrap.ListGroupItem;

  console.group("profilemod");

  GameServerList = React.createClass({displayName: "GameServerList",
    getInitialState: function() {
      return {
        data: this.props.data,
        select_profile: null,
        servers: []
      };
    },
    selectProfile: function(name) {
      return (function(_this) {
        return function() {
          _this.setState({
            select_profile: name
          });
          if (_this.props.set_ser != null) {
            return _this.props.set_ser(name);
          }
        };
      })(this);
    },
    getItemStyle: function(data) {
      if (this.state.select_profile === data) {
        return true;
      } else {
        return false;
      }
    },
    addOneListItem: function(data) {
      var n;
      n = data;
      return React.createElement(ListGroupItem, {
        "onClick": this.selectProfile(data),
        "active": this.getItemStyle(data),
        "key": n
      }, n);
    },
    getAllProfileToSelect: function() {
      return React.createElement("div", null, React.createElement("h6", null, "Please Select A Profile :"), React.createElement(ListGroup, null, this.state.servers.map(this.addOneListItem)));
    },
    GetSelectedProfile: function() {
      return this.state.select_profile;
    },
    componentDidMount: function() {
      return $.get("../api/v1/server_all", (function(_this) {
        return function(result) {
          return _this.setState({
            servers: JSON.parse(result)
          });
        };
      })(this));
    },
    render: function() {
      return this.getAllProfileToSelect();
    }
  });

  AccountKeyInput = React.createClass({displayName: "AccountKeyInput",
    getInitialState: function() {
      return {
        value: ''
      };
    },
    IsRight: function() {
      return this.validationState() === 'success';
    },
    validationState: function() {
      var exp, exp_init, reg, reg_init, v;
      exp = /^(\w+)\:(\d+)\:(\d+)\:(.+)$/;
      exp_init = /^init:(\w+)\:(\d+)\:(\d+)\:(.+)$/;
      if (this.refs.input == null) {
        return 'error';
      }
      v = this.refs.input.getValue();
      reg = v.match(exp);
      reg_init = v.match(exp_init);
      if (reg !== null || reg_init !== null) {
        return 'success';
      } else {
        return 'error';
      }
    },
    handleChange: function() {
      this.setState({
        value: this.refs.input.getValue()
      });
      return this.props.can_cb(this.refs.input.getValue(), this.IsRight());
    },
    render: function() {
      return React.createElement(Input, {
        "type": 'text',
        "value": this.state.value,
        "placeholder": 'Enter Account Key',
        "label": 'Please Enter Account Key',
        "help": 'Validation is based on string in X:X:X:XXX',
        "bsStyle": this.validationState(),
        "hasFeedback": true,
        "ref": 'input',
        "groupClassName": 'group-class',
        "labelClassName": 'label-class',
        "onChange": this.handleChange
      });
    }
  });

  NumInput = React.createClass({displayName: "NumInput",
    getInitialState: function() {
      return {
        value: parseInt(this.props.old)
      };
    },
    IsRight: function() {
      return this.validationState() === 'success';
    },
    validationState: function() {
      var exp, ref, reg, v;
      exp = /^(\d+)$/;
      if (this.refs.input == null) {
        return 'error';
      }
      v = this.refs.input.getValue();
      reg = v.match(exp);
      if (reg !== null && (parseInt(this.props.min) <= (ref = parseInt(v)) && ref < parseInt(this.props.max))) {
        return 'success';
      } else {
        return 'error';
      }
    },
    handleChange: function() {
      var v;
      this.setState({
        value: this.refs.input.getValue()
      });
      v = this.refs.input.getValue();
      return this.props.can_cb(parseInt(v), this.IsRight());
    },
    render: function() {
      return React.createElement(Input, {
        "type": 'text',
        "value": this.state.value,
        "placeholder": 'Enter ' + this.props.name,
        "label": 'Please Enter ' + this.props.name,
        "help": 'MUST in [' + this.props.min + "," + this.props.max + ")",
        "bsStyle": this.validationState(),
        "hasFeedback": true,
        "ref": 'input',
        "groupClassName": 'group-class',
        "labelClassName": 'label-class',
        "onChange": this.handleChange
      });
    }
  });

  getAvataName = function(id) {
    var n, names;
    names = ["关羽", "张飞", "孙尚香"];
    n = names[id];
    if (n == null) {
      n = "未定义主角" + id.toString();
    }
    return n;
  };

  getScName = function(id) {
    var n, names;
    names = ["金钱", "精铁"];
    n = names[id];
    if (n == null) {
      n = "未使用类型" + id.toString();
    }
    return n;
  };

  getHcName = function(id) {
    var n, names;
    names = ["购买钻", "赠送钻", "补偿钻", "钻石总量"];
    n = names[id];
    if (n == null) {
      n = "未使用类型" + id.toString();
    }
    return n;
  };

  mkModifyModel = function(logic) {
    return React.createClass({
      getInitialState: function() {
        return {
          cb: this.props.cb,
          maker: this.props.maker,
          is_ok: true,
          v: this.props.v,
          l: logic
        };
      },
      montify: function() {
        console.log(this.state);
        this.props.cb(this.props.maker.key, this.state.v);
        this.props.onRequestHide();
      },
      render: function() {
        return React.createElement(Modal, Object.assign({}, this.props, {
          "title": this.props.maker.name,
          "animation": true
        }), React.createElement("div", {
          "className": 'modal-body'
        }, this.state.l.ModifyRender(this), React.createElement(ButtonToolbar, null, React.createElement(Button, {
          "bsStyle": 'primary',
          "onClick": this.montify,
          "disabled": !this.state.is_ok
        }, "Montify"), React.createElement(Button, {
          "onClick": this.props.onRequestHide
        }, "Cancel"))));
      }
    });
  };


  /*
  {
    "Avatars": [
      {
        "Level": 1,
        "Xp": 0
      },
      {
        "Level": 1,
        "Xp": 0
      },
      {
        "Level": 1,
        "Xp": 0
      }
    ]
  }
   */

  GameAvatarExpInfo = React.createClass({displayName: "GameAvatarExpInfo",
    getInitialState: function() {
      var o;
      o = JSON.parse(this.props.data);
      return {
        exps: o.Avatars
      };
    },
    SetData: function(data) {
      var o;
      o = JSON.parse(data);
      console.log(o);
      return this.setState({
        exps: o.Avatars
      });
    },
    getAllInfo: function(exps) {
      var k, re, v;
      if (exps == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in exps) {
        v = exps[k];
        console.log(v);
        re.push(React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, k), React.createElement("td", null, getAvataName(k)), React.createElement("td", null, v.Level), React.createElement("td", null, v.Xp)));
      }
      return re;
    },
    render: function() {
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "AvatarId"), React.createElement("th", null, "Name"), React.createElement("th", null, "Level"), React.createElement("th", null, "Xp"))), React.createElement("tbody", null, this.getAllInfo(this.state.exps)));
    }
  });

  GameAvatarExpModifyModal = mkModifyModel({
    Get: function(v) {
      var obj;
      obj = JSON.parse(v);
      return obj.Avatars;
    },
    GetOne: function(v, typ, idx) {
      var obj;
      obj = JSON.parse(v);
      return obj.Avatars[idx][typ];
    },
    OnChange: function(react_obj, typ, idx, v, ok) {
      var nv;
      nv = JSON.parse(react_obj.state.v);
      nv.Avatars[parseInt(idx)][typ] = v;
      return react_obj.setState({
        is_ok: ok,
        v: JSON.stringify(nv)
      });
    },
    mkAvatarMods: function(react_obj) {
      var avatar_exp, avatar_exps, fn, k, re, self;
      self = this;
      re = [];
      avatar_exps = self.Get(react_obj.state.v);
      fn = function(k, avatar_exp) {
        return re.push(React.createElement("div", null, React.createElement("div", null, "Mod ", getAvataName(k), " Exp: "), React.createElement("hr", null), React.createElement(NumInput, {
          "can_cb": (function(v, ok) {
            return self.OnChange(react_obj, "Level", k, v, ok);
          }),
          "name": "Level",
          "old": self.GetOne(react_obj.state.v, "Level", k),
          "min": "1",
          "max": "100"
        }), React.createElement(NumInput, {
          "can_cb": (function(v, ok) {
            return self.OnChange(react_obj, "Xp", k, v, ok);
          }),
          "name": "Xp",
          "old": self.GetOne(react_obj.state.v, "Xp", k),
          "min": "0",
          "max": "999999"
        })));
      };
      for (k in avatar_exps) {
        avatar_exp = avatar_exps[k];
        fn(k, avatar_exp);
      }
      return re;
    },
    ModifyRender: function(react_obj) {
      var self;
      self = this;
      return React.createElement("div", null, self.mkAvatarMods(react_obj));
    }
  });


  /*
  {"Level":12,"Xp":43}
   */

  GameCorpInfo = React.createClass({displayName: "GameCorpInfo",
    getInitialState: function() {
      var o;
      o = JSON.parse(this.props.data);
      return {
        exps: o
      };
    },
    SetData: function(data) {
      var o;
      o = JSON.parse(data);
      return this.setState({
        exps: o
      });
    },
    render: function() {
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "Name"), React.createElement("th", null, "Value"))), React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, "战队等级"), React.createElement("td", null, this.state.exps.Level)), React.createElement("tr", null, React.createElement("td", null, "战队当前经验"), React.createElement("td", null, this.state.exps.Xp))));
    }
  });

  GameCorpModifyModal = mkModifyModel({
    Get: function(v, typ) {
      var obj;
      obj = JSON.parse(v);
      return obj[typ];
    },
    OnChange: function(react_obj, typ, v, ok) {
      var nv;
      nv = JSON.parse(react_obj.state.v);
      nv[typ] = v;
      return react_obj.setState({
        is_ok: ok,
        v: JSON.stringify(nv)
      });
    },
    mkMods: function(react_obj) {
      var data, self;
      self = this;
      data = self.Get(react_obj.state.v);
      return React.createElement("div", null, React.createElement("div", null, "Mod Corp Exp: "), React.createElement("hr", null), React.createElement(NumInput, {
        "can_cb": (function(v, ok) {
          return self.OnChange(react_obj, "Level", v, ok);
        }),
        "name": "Level",
        "old": self.Get(react_obj.state.v, "Level"),
        "min": "1",
        "max": "100"
      }), React.createElement(NumInput, {
        "can_cb": (function(v, ok) {
          return self.OnChange(react_obj, "Xp", v, ok);
        }),
        "name": "Xp",
        "old": self.Get(react_obj.state.v, "Xp"),
        "min": "0",
        "max": "999999"
      }));
    },
    ModifyRender: function(react_obj) {
      var self;
      self = this;
      return React.createElement("div", null, self.mkMods(react_obj));
    }
  });


  /*
  {"Value":240,"Last_time":1433832902}
   */

  GameEnergyInfo = React.createClass({displayName: "GameEnergyInfo",
    getInitialState: function() {
      var o;
      o = JSON.parse(this.props.data);
      return {
        data: o
      };
    },
    SetData: function(data) {
      var o;
      o = JSON.parse(data);
      return this.setState({
        data: o
      });
    },
    render: function() {
      return React.createElement("div", null, this.state.data.Value);
    }
  });

  GameEnergyModifyModal = mkModifyModel({
    Get: function(v) {
      var obj;
      obj = JSON.parse(v);
      return obj.Value;
    },
    OnChange: function(react_obj, typ, v, ok) {
      var nv;
      nv = JSON.parse(react_obj.state.v);
      nv.Value = v;
      return react_obj.setState({
        is_ok: ok,
        v: JSON.stringify(nv)
      });
    },
    ModifyRender: function(react_obj) {
      var self;
      self = this;
      return React.createElement(NumInput, {
        "ref": "in",
        "can_cb": (function(v, ok) {
          return self.OnChange(react_obj, "energy", v, ok);
        }),
        "name": react_obj.props.maker.name,
        "old": this.Get(react_obj.state.v),
        "min": "0",
        "max": "1000"
      });
    }
  });


  /*
  {
    "Stages": [
      {
        "Id": "k1_2",
        "Reward_state": [
          {
            "Reward_count": 0,
            "Space_num": 0
          },
          {
            "Reward_count": 1,
            "Space_num": 0
          }
        ],
        "T_count": 2,
        "T_refresh": 0,
        "Max_star": 2
      }
    ],
    "Last_update": "2015-06-09T11:28:56.55249256+08:00",
    "LastStageId": "k1_qz1"
  }
   */

  GameStageInfo = React.createClass({displayName: "GameStageInfo",
    getInitialState: function() {
      var o;
      o = JSON.parse(this.props.data);
      return {
        data: o
      };
    },
    SetData: function(data) {
      var o;
      o = JSON.parse(data);
      return this.setState({
        data: o
      });
    },
    getAllInfo: function(data) {
      var k, re, ref, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      ref = data.Stages;
      for (k in ref) {
        v = ref[k];
        console.log(v);
        re.push(React.createElement("tr", {
          "key": v.Id
        }, React.createElement("td", null, v.Id), React.createElement("td", null, v.T_count), React.createElement("td", null, v.T_refresh), React.createElement("td", null, v.Max_star)));
      }
      return re;
    },
    render: function() {
      return React.createElement("div", null, React.createElement("div", null, "最近一次进入的关卡 ", this.state.data.LastStageId), React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "关卡ID"), React.createElement("th", null, "今日通关次数(不会主动刷新)"), React.createElement("th", null, "今日通关次数刷新次数(不会主动刷新)"), React.createElement("th", null, "最高星级"))), React.createElement("tbody", null, this.getAllInfo(this.state.data))));
    }
  });

  GameStageModifyModal = mkModifyModel({
    Get: function(v, typ) {
      var obj;
      obj = JSON.parse(v);
      return obj[typ];
    },
    OnChange: function(react_obj, typ, v, ok) {
      var nv;
      nv = JSON.parse(react_obj.state.v);
      nv[typ] = v;
      return react_obj.setState({
        is_ok: ok,
        v: JSON.stringify(nv)
      });
    },
    mkMods: function(react_obj) {
      var data, self;
      self = this;
      data = self.Get(react_obj.state.v);
      return React.createElement("div", null, React.createElement("div", null, "Mod Corp Exp: "), React.createElement("hr", null), React.createElement(NumInput, {
        "can_cb": (function(v, ok) {
          return self.OnChange(react_obj, "Level", v, ok);
        }),
        "name": "Level",
        "old": self.Get(react_obj.state.v, "Level"),
        "min": "1",
        "max": "100"
      }), React.createElement(NumInput, {
        "can_cb": (function(v, ok) {
          return self.OnChange(react_obj, "Xp", v, ok);
        }),
        "name": "Xp",
        "old": self.Get(react_obj.state.v, "Xp"),
        "min": "0",
        "max": "999999"
      }));
    },
    ModifyRender: function(react_obj) {
      var self;
      self = this;
      return React.createElement("div", null, self.mkMods(react_obj));
    }
  });


  /*
  {"Currency":[123700,70000,357160,0,0,0]}
   */

  GameCurrencyInfo = React.createClass({displayName: "GameCurrencyInfo",
    getInitialState: function() {
      var o;
      o = JSON.parse(this.props.data);
      return {
        data: o.Currency
      };
    },
    SetData: function(data) {
      var o;
      o = JSON.parse(data);
      return this.setState({
        data: o.Currency
      });
    },
    getAllInfo: function(data) {
      var k, re, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in data) {
        v = data[k];
        console.log(v);
        re.push(React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, getScName(k)), React.createElement("td", null, v)));
      }
      return re;
    },
    render: function() {
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "类型"), React.createElement("th", null, "金额"))), React.createElement("tbody", null, this.getAllInfo(this.state.data)));
    }
  });

  GameSCModifyModal = mkModifyModel({
    Get: function(v) {
      var obj;
      obj = JSON.parse(v);
      return obj.Currency;
    },
    GetOne: function(v, typ) {
      var obj;
      obj = JSON.parse(v);
      return obj.Currency[typ];
    },
    OnChange: function(react_obj, typ, v, ok) {
      var nv;
      nv = JSON.parse(react_obj.state.v);
      nv.Currency[typ] = v;
      return react_obj.setState({
        is_ok: ok,
        v: JSON.stringify(nv)
      });
    },
    mkMods: function(react_obj) {
      var fn, k, re, sc, scs, self;
      self = this;
      re = [];
      scs = self.Get(react_obj.state.v);
      fn = function(k, sc) {
        return re.push(React.createElement("div", null, React.createElement(NumInput, {
          "can_cb": (function(v, ok) {
            return self.OnChange(react_obj, k, v, ok);
          }),
          "name": getScName(k),
          "old": self.GetOne(react_obj.state.v, k),
          "min": "0",
          "max": "9999999"
        })));
      };
      for (k in scs) {
        sc = scs[k];
        fn(k, sc);
      }
      return re;
    },
    ModifyRender: function(react_obj) {
      var self;
      self = this;
      return React.createElement("div", null, self.mkMods(react_obj));
    }
  });


  /*
  {"Currency":[1800,100,0,1900]}
   */

  GameHardCurrencyInfo = React.createClass({displayName: "GameHardCurrencyInfo",
    getInitialState: function() {
      var o;
      o = JSON.parse(this.props.data);
      return {
        data: o.Currency
      };
    },
    SetData: function(data) {
      var o;
      o = JSON.parse(data);
      return this.setState({
        data: o.Currency
      });
    },
    getAllInfo: function(data) {
      var k, re, v;
      if (data == null) {
        return React.createElement("div", null, "UnKnown Info");
      }
      re = [];
      for (k in data) {
        v = data[k];
        console.log(v);
        re.push(React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, getHcName(k)), React.createElement("td", null, v)));
      }
      return re;
    },
    render: function() {
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "类型"), React.createElement("th", null, "金额"))), React.createElement("tbody", null, this.getAllInfo(this.state.data)));
    }
  });

  GameHCModifyModal = mkModifyModel({
    Get: function(v) {
      var obj;
      obj = JSON.parse(v);
      return obj.Currency;
    },
    GetOne: function(v, typ) {
      var obj;
      obj = JSON.parse(v);
      return obj.Currency[typ];
    },
    OnChange: function(react_obj, typ, v, ok) {
      var nv;
      nv = JSON.parse(react_obj.state.v);
      nv.Currency[typ] = v;
      nv.Currency[3] = nv.Currency[0] + nv.Currency[1] + nv.Currency[2];
      return react_obj.setState({
        is_ok: ok,
        v: JSON.stringify(nv)
      });
    },
    mkMods: function(react_obj) {
      var fn, k, re, sc, scs, self;
      self = this;
      re = [];
      scs = self.Get(react_obj.state.v);
      fn = function(k, sc) {
        return re.push(React.createElement("div", null, React.createElement(NumInput, {
          "can_cb": (function(v, ok) {
            return self.OnChange(react_obj, k, v, ok);
          }),
          "name": getHcName(k),
          "old": self.GetOne(react_obj.state.v, k),
          "min": "0",
          "max": "9999999"
        })));
      };
      for (k in scs) {
        sc = scs[k];
        fn(k, sc);
      }
      return re;
    },
    ModifyRender: function(react_obj) {
      var self;
      self = this;
      return React.createElement("div", null, self.mkMods(react_obj));
    }
  });

  JsonMod = React.createClass({displayName: "JsonMod",
    getInitialState: function() {
      return {};
    },
    componentDidMount: function() {
      var container, editor, options;
      container = document.getElementById(this.props.name + "jsoneditor");
      options = {
        mode: 'view'
      };
      editor = new JSONEditor(container, options);
      editor.set(JSON.parse(this.props.data));
    },
    render: function() {
      return React.createElement("div", {
        "id": this.props.name + "jsoneditor"
      });
    }
  });

  mkJsonMod = function(data, name) {
    return React.createElement("div", null, React.createElement(JsonMod, {
      "id": name,
      "key": name,
      "data": data,
      "name": name
    }));
  };

  InfoMakers = {};

  RegIM = function(key, name, func, mod_func) {
    return InfoMakers[key] = {
      key: key,
      name: name,
      func: func,
      mod_func: mod_func
    };
  };

  RegIM("sc", "软通信息", (function(data, name) {
    return React.createElement(GameCurrencyInfo, {
      "ref": name,
      "data": data
    });
  }), function(maker, v, cb) {
    return React.createElement(GameSCModifyModal, {
      "maker": maker,
      "v": v,
      "cb": cb
    });
  });

  RegIM("hc", "硬通信息", (function(data, name) {
    return React.createElement(GameHardCurrencyInfo, {
      "ref": name,
      "data": data
    });
  }), function(maker, v, cb) {
    return React.createElement(GameHCModifyModal, {
      "maker": maker,
      "v": v,
      "cb": cb
    });
  });

  RegIM("energy", "战队体力", (function(data, name) {
    return React.createElement(GameEnergyInfo, {
      "ref": name,
      "data": data
    });
  }), function(maker, v, cb) {
    return React.createElement(GameEnergyModifyModal, {
      "maker": maker,
      "v": v,
      "cb": cb
    });
  });

  ProfileInfo = React.createClass({displayName: "ProfileInfo",
    getInitialState: function() {
      return {
        profile_data: {}
      };
    },
    SetData: function(data) {
      this.setState({
        profile_data: {}
      });
      return this.setState({
        profile_data: data
      });
    },
    getAllInfo: function(data) {
      var fn, k, re, self, v;
      self = this;
      if (data == null) {
        return React.createElement("div", null, "Wait To Query");
      }
      re = [];
      fn = function(k, v) {
        return re.push(self.getInfoMaker(k, v));
      };
      for (k in data) {
        v = data[k];
        fn(k, v);
      }
      return re;
    },
    mkMaker: function(f, k) {
      console.log("mkMaker");
      console.log(f);
      console.log(k);
      return f(this.state.profile_data[k], k);
    },
    getInfoMaker: function(k, v) {
      var maker;
      maker = InfoMakers[k];
      if (maker != null) {
        return React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, maker.name), React.createElement("td", null, this.mkMaker(maker.func, k)));
      } else {
        return React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, k), React.createElement("td", null, v));
      }
    },
    render: function() {
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "Class"), React.createElement("th", null, "Data"))), React.createElement("tbody", null, this.getAllInfo(this.state.profile_data)));
    }
  });

  ProfileModify = React.createClass({displayName: "ProfileModify",
    getInitialState: function() {
      return {
        profile_data: {}
      };
    },
    SetData: function(data) {
      this.setState({
        profile_data: {}
      });
      return this.setState({
        profile_data: data
      });
    },
    GetData: function() {
      return this.state.profile_data;
    },
    SetDataByKey: function(key, data) {
      var dataall, info;
      console.log("SetDataByKey");
      console.log(key);
      console.log(data);
      dataall = this.state.profile_data;
      this.setState({
        profile_data: {}
      });
      dataall[key] = data;
      this.setState({
        profile_data: dataall
      });
      info = this.refs[key];
      if (info != null) {
        console.log("data");
        return info.SetData(data);
      }
    },
    getAllInfo: function(data) {
      var fn, k, re, self, v;
      console.log(this.state.profile_data);
      self = this;
      if (data == null) {
        return React.createElement("div", null, "Wait To Query");
      }
      re = [];
      fn = function(k, v) {
        return re.push(self.getInfoMaker(k, v));
      };
      for (k in data) {
        v = data[k];
        fn(k, v);
      }
      return re;
    },
    getModifyButtons: function(maker, v) {
      console.log("dasdasdasdasdasd ", maker.mod_func, v);
      if (maker.mod_func != null) {
        console.log("dasdasdasdasdasd");
        return React.createElement("div", {
          "class": "container-fluid"
        }, React.createElement("div", null, maker.name), React.createElement(ModalTrigger, {
          "modal": maker.mod_func(maker, v, this.SetDataByKey)
        }, React.createElement(Button, {
          "bsStyle": 'danger',
          "onClick": null
        }, "Modify")));
      } else {
        return React.createElement("div", null, maker.name);
      }
    },
    mkMaker: function(f, k) {
      console.log("mkMaker");
      console.log(f);
      console.log(k);
      return f(this.state.profile_data[k], k);
    },
    getInfoMaker: function(k, v) {
      var maker;
      maker = InfoMakers[k];
      if (v == null) {
        v = {};
      }
      if (maker != null) {
        return React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, this.getModifyButtons(maker, v)), React.createElement("td", null, this.mkMaker(maker.func, k)));
      } else {
        return React.createElement("tr", {
          "key": k
        }, React.createElement("td", null, k), React.createElement("td", null, v));
      }
    },
    handleChangeDataForCommit: function(event) {
      var commit_data;
      commit_data = JSON.parse(event.target.value);
      console.log(commit_data);
      return this.SetData(commit_data);
    },
    getDataForCommit: function() {
      var commit_data;
      commit_data = this.GetData();
      console.log(commit_data);
      return JSON.stringify(commit_data);
    },
    render: function() {
      return React.createElement("div", null, React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "Class"), React.createElement("th", null, "Data"))), React.createElement("tbody", null, this.getAllInfo(this.state.profile_data))), React.createElement("div", null, React.createElement("input", {
        "type": "text",
        "value": this.getDataForCommit(),
        "onChange": this.handleChangeDataForCommit
      })));
    }
  });

  ProfileQuery = React.createClass({displayName: "ProfileQuery",
    getInitialState: function() {
      return {
        servers: [],
        state: null,
        is_can_query: false,
        profile_key: null
      };
    },
    componentDidMount: function() {
      return $.get("../api/v1/server_all", (function(_this) {
        return function(result) {
          return _this.setState({
            servers: JSON.parse(result)
          });
        };
      })(this));
    },
    set_can_query: function(profile, is_can) {
      return this.setState({
        profile_key: profile,
        is_can_query: is_can
      });
    },
    query: function() {
      console.log("query");
      console.log(this.props.server);
      console.log(this.state.profile_key);
      $.get("../api/v1/profile_get/" + this.props.server + "/" + this.state.profile_key, (function(_this) {
        return function(result) {
          var k, rj, v;
          rj = JSON.parse(result);
          for (k in rj) {
            v = rj[k];
            console.log(v);
          }
          console.log(rj);
          return _this.setProfileInfo(rj);
        };
      })(this));
    },
    mod: function() {
      var ndata, server;
      server = this.refs.selector.GetSelectedProfile();
      ndata = {
        v: JSON.stringify(this.getProfileInfo())
      };
      console.log(ndata);
      return $.ajax({
        url: "../api/v1/profile_get/" + server + "/" + this.state.profile_key,
        dataType: "json",
        type: "POST",
        data: JSON.stringify(ndata),
        contentType: "application/json; charset=utf-8",
        complete: function(xhr, status) {
          var rc;
          rc = {
            status: xhr.status,
            json: xhr.responseJSON
          };
          return console.log(rc);
        }
      });
    },
    setProfileInfo: function(data) {
      return this.refs.info.SetData(data);
    },
    getProfileInfo: function() {
      if (this.refs.info != null) {
        return this.refs.info.GetData();
      } else {
        return {};
      }
    },
    getHeader: function() {
      if (this.props.typ === "Query") {
        return "Profile Query";
      } else {
        return "Profile Modify";
      }
    },
    getList: function() {
      if (this.props.typ === "Query") {
        return React.createElement(ProfileInfo, {
          "ref": "info"
        });
      } else {
        return React.createElement(ProfileModify, {
          "ref": "info"
        });
      }
    },
    render: function() {
      return React.createElement("div", null, React.createElement("div", null, React.createElement("div", {
        "id": "header"
      }, React.createElement("h1", null, this.getHeader()))), React.createElement("div", null, React.createElement("div", {
        "id": "content"
      }, React.createElement(AccountKeyInput, {
        "can_cb": this.set_can_query
      })), React.createElement("p", null, "查询玩家个人身上存档信息"), React.createElement("p", null, "例: [profile:0:10:XXXXXX][pguild:0:10:XXXXXX][friend:0:10:XXXXXX]....."), React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": this.query,
        "disabled": !this.state.is_can_query
      }, "Query")), React.createElement("div", null, this.getList()));
    }
  });

  module.exports = {
    ProfileQuery: ProfileQuery,
    GameServerList: GameServerList,
    AccountKeyInput: AccountKeyInput
  };

}).call(this);
