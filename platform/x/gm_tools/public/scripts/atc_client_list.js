// Generated by CoffeeScript 1.12.7
(function() {
  var $, AtcAdmin, AtcClientContorl, AtcClientList, AtcClientMontify, AtcClientMontifyModal, AtcClientNewModal, AtcProfileSelector, AtcRestClient, AtcSettings, AtcTitle, IPInput, React, nullfunc;

  React = require('react');

  $ = require('jquery');

  nullfunc = function() {};

  AtcTitle = React.createClass({displayName: "AtcTitle",
    componentDidMount: function() {},
    render: function() {
      return React.createElement(Navbar, {
        "brand": 'Taiyouxi-admin',
        "inverse": true,
        "toggleNavKey": 0
      }, React.createElement(Nav, {
        "right": true,
        "eventKey": 0
      }, " ", React.createElement(NavItem, {
        "eventKey": 1,
        "href": '#'
      }, "Link"), React.createElement(NavItem, {
        "eventKey": 2,
        "href": '#'
      }, "Link"), React.createElement(DropdownButton, {
        "eventKey": 3,
        "title": 'Dropdown'
      }, React.createElement(MenuItem, {
        "eventKey": '1'
      }, "Action"), React.createElement(MenuItem, {
        "eventKey": '2'
      }, "Another action"), React.createElement(MenuItem, {
        "eventKey": '3'
      }, "Something else here"), React.createElement(MenuItem, {
        "divider": true
      }), React.createElement(MenuItem, {
        "eventKey": '4'
      }, "Separated link"))));
    }
  });

  AtcRestClient = function(endpoint) {
    var _add_ending_slash;
    _add_ending_slash = function(string) {
      if (string[string.length - 1] !== "/") {
        string += "/";
      }
      return string;
    };
    this.endpoint = "/api/v1/";
    this.api_call = function(method, urn, callback, data) {
      urn = _add_ending_slash(urn);
      return $.ajax({
        url: this.endpoint + urn + endpoint,
        dataType: "json",
        type: method,
        data: data && JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        complete: function(xhr, status) {
          var rc;
          rc = {
            status: xhr.status,
            json: xhr.responseJSON
          };
          if (callback != null) {
            return callback(rc);
          }
        }
      });
    };
    this.shape = function(callback, data) {
      return this.api_call("POST", "shape", callback, data);
    };
    this.unshape = function(callback, data) {
      return this.api_call("DELETE", "shape", callback);
    };
    this.getCurrentShaping = function(callback) {
      return this.api_call("GET", "shape", callback);
    };
    this.getToken = function(callback) {
      return this.api_call("GET", "token", callback);
    };
    this.getAuthInfo = function(callback) {
      return this.api_call("GET", "auth", callback);
    };
    this.updateAuthInfo = function(address, data, callback) {
      return this.api_call("POST", "auth/".concat(address), callback, data);
    };
    this.mkSetting = function(setting) {
      return {
        "down": {
          "loss": {
            "percentage": parseInt(setting.down.loss.percentage, 10),
            "correlation": parseInt(setting.down.loss.correlation, 10)
          },
          "delay": {
            "delay": parseInt(setting.down.delay.delay, 10),
            "jitter": parseInt(setting.down.delay.jitter, 10),
            "correlation": parseInt(setting.down.delay.correlation, 10)
          },
          "rate": parseInt(setting.down.rate, 10),
          "iptables_options": [],
          "corruption": {
            "percentage": parseInt(setting.down.corruption.percentage, 10),
            "correlation": parseInt(setting.down.corruption.correlation, 10)
          },
          "reorder": {
            "percentage": parseInt(setting.down.reorder.percentage, 10),
            "correlation": parseInt(setting.down.reorder.correlation, 10),
            "gap": parseInt(setting.down.reorder.gap, 10)
          }
        },
        "up": {
          "loss": {
            "percentage": parseInt(setting.up.loss.percentage, 10),
            "correlation": parseInt(setting.up.loss.correlation, 10)
          },
          "delay": {
            "delay": parseInt(setting.up.delay.delay, 10),
            "jitter": parseInt(setting.up.delay.jitter, 10),
            "correlation": parseInt(setting.up.delay.correlation, 10)
          },
          "rate": parseInt(setting.up.rate, 10),
          "iptables_options": [],
          "corruption": {
            "percentage": parseInt(setting.up.corruption.percentage, 10),
            "correlation": parseInt(setting.up.corruption.correlation, 10)
          },
          "reorder": {
            "percentage": parseInt(setting.up.reorder.percentage, 10),
            "correlation": parseInt(setting.up.reorder.correlation, 10),
            "gap": parseInt(setting.up.reorder.gap, 10)
          }
        }
      };
    };
    return this;
  };

  AtcSettings = function() {
    this.defaults = {
      up: {
        rate: null,
        delay: {
          delay: 0,
          jitter: 0,
          correlation: 0
        },
        loss: {
          percentage: 0,
          correlation: 0
        },
        reorder: {
          percentage: 0,
          correlation: 0,
          gap: 0
        },
        corruption: {
          percentage: 0,
          correlation: 0
        },
        iptables_options: Array()
      },
      down: {
        rate: null,
        delay: {
          delay: 0,
          jitter: 0,
          correlation: 0
        },
        loss: {
          percentage: 0,
          correlation: 0
        },
        reorder: {
          percentage: 0,
          correlation: 0,
          gap: 0
        },
        corruption: {
          percentage: 0,
          correlation: 0
        },
        iptables_options: Array()
      }
    };
    this.getDefaultSettings = function() {
      return $.extend(true, {}, this.defaults);
    };
    this.mergeWithDefaultSettings = function(data) {
      return $.extend(true, {}, this.defaults, data);
    };
    return this;
  };

  AtcProfileSelector = React.createClass({displayName: "AtcProfileSelector",
    getInitialState: function() {
      return {
        data: this.props.data,
        select_profile: null,
        profiles: []
      };
    },
    selectProfile: function(name) {
      return (function(_this) {
        return function() {
          return _this.setState({
            select_profile: name
          });
        };
      })(this);
    },
    getItemStyle: function(data) {
      if ((this.state.select_profile != null) && this.state.select_profile.name === data.name) {
        return true;
      } else {
        return false;
      }
    },
    addOneListItem: function(data) {
      var n;
      n = data.name;
      return React.createElement(ListGroupItem, {
        "onClick": this.selectProfile(data),
        "active": this.getItemStyle(data),
        "key": n
      }, n);
    },
    getAllProfileToSelect: function() {
      return React.createElement("div", null, React.createElement("h6", null, "Please Select A Profile :"), React.createElement(ListGroup, null, this.state.profiles.map(this.addOneListItem)));
    },
    GetSelectedProfile: function() {
      return this.state.select_profile;
    },
    componentDidMount: function() {
      return $.get("../api/v1/profiles/", (function(_this) {
        return function(result) {
          return _this.setState({
            data: _this.props.data,
            select_profile: null,
            profiles: JSON.parse(result)
          });
        };
      })(this));
    },
    render: function() {
      return this.getAllProfileToSelect();
    }
  });

  IPInput = React.createClass({displayName: "IPInput",
    getInitialState: function() {
      return {
        value: ''
      };
    },
    GetIP: function() {
      return this.state.value;
    },
    IsRight: function() {
      return this.validationState() === 'success';
    },
    validationState: function() {
      var exp, reg;
      exp = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
      reg = this.state.value.match(exp);
      if (reg !== null) {
        return 'success';
      } else {
        return 'error';
      }
    },
    handleChange: function() {
      this.setState({
        value: this.refs.input.getValue()
      });
      return this.props.can_cb(this.refs.input.getValue());
    },
    render: function() {
      return React.createElement(Input, {
        "type": 'text',
        "value": this.state.value,
        "placeholder": 'Enter Client IP',
        "label": 'Please Enter New Client IP',
        "help": 'Validation is based on string in XXX.XXX.XXX.XXX.',
        "bsStyle": this.validationState(),
        "hasFeedback": true,
        "ref": 'input',
        "groupClassName": 'group-class',
        "labelClassName": 'label-class',
        "onChange": this.handleChange
      });
    }
  });

  AtcClientMontifyModal = React.createClass({displayName: "AtcClientMontifyModal",
    getInitialState: function() {
      return {
        data: this.props.data
      };
    },
    montify: function() {
      var profile_data;
      profile_data = this.refs.selector.GetSelectedProfile();
      this.props.setCb(profile_data.content);
      this.props.onRequestHide();
    },
    render: function() {
      return React.createElement(Modal, Object.assign({}, this.props, {
        "title": this.props.name,
        "animation": true
      }), React.createElement("div", {
        "className": 'modal-body'
      }, React.createElement("h4", null, "Montify ", this.state.data.ip), React.createElement("hr", null), React.createElement(AtcProfileSelector, {
        "ref": "selector"
      })), React.createElement("div", {
        "className": 'modal-footer'
      }, React.createElement(ButtonToolbar, null, React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": this.montify
      }, "Montify"), React.createElement(Button, {
        "onClick": this.props.onRequestHide
      }, "Close"))));
    }
  });

  AtcClientNewModal = React.createClass({displayName: "AtcClientNewModal",
    getInitialState: function() {
      return {
        ip: null,
        is_can_create: false
      };
    },
    onCreateFinish: function(nip) {
      this.props.update_cb(nip);
      this.props.onRequestHide();
    },
    create: function() {
      var client, setting;
      setting = this.refs.selector.GetSelectedProfile();
      client = new AtcRestClient(this.state.ip);
      if (setting !== null) {
        setting = client.mkSetting(setting.content);
        client.shape(this.onCreateFinish.bind(this, this.state.ip), setting);
      } else {
        this.onCreateFinish(this.state.ip);
      }
    },
    set_can_create: function(nip) {
      return this.setState({
        ip: nip,
        is_can_create: this.state.is_can_create & true
      });
    },
    render: function() {
      return React.createElement(Modal, Object.assign({}, this.props, {
        "title": this.props.name,
        "animation": true
      }), React.createElement("div", {
        "className": 'modal-body'
      }, React.createElement(IPInput, {
        "can_cb": this.set_can_create
      }), React.createElement("hr", null), React.createElement(AtcProfileSelector, {
        "ref": "selector"
      })), React.createElement("div", {
        "className": 'modal-footer'
      }, React.createElement(ButtonToolbar, null, React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": this.create,
        "disabled": !this.state.is_can_create
      }, "Create"), React.createElement(Button, {
        "onClick": this.props.onRequestHide
      }, "Close"))));
    }
  });

  AtcClientContorl = React.createClass({displayName: "AtcClientContorl",
    render: function() {
      return React.createElement(ButtonToolbar, null, React.createElement(ModalTrigger, {
        "modal": React.createElement(AtcClientNewModal, {
          "data": {
            ip: "10.0.1."
          },
          "name": "Atc New",
          "update_cb": this.props.update_cb
        })
      }, React.createElement(Button, {
        "bsStyle": 'primary'
      }, "New")));
    }
  });

  AtcClientMontify = React.createClass({displayName: "AtcClientMontify",
    getInitialState: function() {
      var set;
      set = new AtcSettings();
      return {
        client: new AtcRestClient(this.props.data.ip),
        is_turn_on: null,
        is_waiting: false,
        settings: set.defaults
      };
    },
    initByCurrentShaping: function(data) {
      if ((data.json.down != null) && (data.json.up != null)) {
        return this.setState({
          is_turn_on: "1",
          settings: this.state.client.mkSetting(data.json)
        });
      }
    },
    loadData: function() {
      return this.state.client.getCurrentShaping(this.initByCurrentShaping.bind(this));
    },
    componentDidMount: function() {
      return this.state.client.getCurrentShaping(this.initByCurrentShaping.bind(this));
    },
    turn: function(rc) {
      var is_on;
      is_on = this.state.is_turn_on != null ? null : '1';
      this.setState({
        is_turn_on: is_on,
        is_waiting: false
      });
    },
    changeSetting: function(setting) {
      this.setState({
        settings: this.state.client.mkSetting(setting)
      });
      this.state.client.shape(nullfunc, {
        down: this.state.settings.down,
        up: this.state.settings.up
      });
      this.setState({
        is_turn_on: '1',
        is_waiting: false
      });
    },
    onClickTurn: function() {
      this.setState({
        is_turn_on: this.state.is_turn_on,
        is_waiting: true
      });
      if (!this.state.is_turn_on) {
        this.state.client.shape(this.turn.bind(this), {
          down: this.state.settings.down,
          up: this.state.settings.up
        });
      } else {
        this.state.client.unshape(this.turn.bind(this));
      }
    },
    getTurnText: function(is_waiting, is_turn_on) {
      if (is_waiting) {
        return "waiting ...";
      } else {
        if (is_turn_on) {
          return "Turn Off";
        } else {
          return "Turn On";
        }
      }
    },
    render: function() {
      var is_turn_on, is_waiting;
      is_waiting = this.state.is_waiting;
      is_turn_on = this.state.is_turn_on;
      return React.createElement(ButtonToolbar, null, React.createElement(ModalTrigger, {
        "modal": React.createElement(AtcClientMontifyModal, {
          "data": this.props.data,
          "setCb": this.changeSetting,
          "currSetting": this.state.settings,
          "name": "Atc Montify"
        })
      }, React.createElement(Button, {
        "bsStyle": 'danger'
      }, "Montify")), React.createElement(Button, {
        "bsStyle": (is_turn_on ? 'success' : 'warning'),
        "disabled": is_waiting,
        "onClick": this.onClickTurn
      }, this.getTurnText(is_waiting, is_turn_on)));
    }
  });

  AtcClientList = React.createClass({displayName: "AtcClientList",
    getInitialState: function() {
      return {
        atc_data_list: []
      };
    },
    loadData: function(nip) {
      return $.get("../api/v1/clientall/", (function(_this) {
        return function(result) {
          var a, i, j, k, len, len1, list, new_list, r, ref, res, v;
          list = {};
          ref = _this.state.atc_data_list;
          for (i = 0, len = ref.length; i < len; i++) {
            a = ref[i];
            list[a.ip] = a;
          }
          if (nip != null) {
            list[nip] = {
              ip: nip
            };
          }
          res = JSON.parse(result);
          for (j = 0, len1 = res.length; j < len1; j++) {
            r = res[j];
            list[r.ip] = r;
          }
          new_list = [];
          for (k in list) {
            v = list[k];
            new_list.push(v);
          }
          return _this.setState({
            atc_data_list: new_list
          });
        };
      })(this));
    },
    componentDidMount: function() {
      return this.loadData();
    },
    AddOneToTable: function(data) {
      return React.createElement("tr", {
        "key": data.ip
      }, React.createElement("td", null, data.ip), React.createElement("td", null, React.createElement(AtcClientMontify, {
        "data": data
      })));
    },
    AddClient: function(nip) {
      var atc_data_list;
      atc_data_list = this.state.atc_data_list;
      atc_data_list[atc_data_list.length] = {
        ip: nip,
        idx: atc_data_list.length
      };
      return this.setState({
        atc_data_list: atc_data_list
      });
    },
    getTables: function() {
      var results;
      results = this.state.atc_data_list;
      return React.createElement("tbody", null, results.map(this.AddOneToTable));
    },
    render: function() {
      return React.createElement(Table, {
        "striped": true,
        "bordered": true,
        "condensed": true,
        "hover": true
      }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "IP"), React.createElement("th", null, "Op"))), this.getTables());
    }
  });

  AtcAdmin = React.createClass({displayName: "AtcAdmin",
    getInitialState: function() {
      return {};
    },
    update_all: function(nip) {
      return this.refs.list.loadData(nip);
    },
    render: function() {
      return React.createElement("div", null, React.createElement(AtcTitle, {
        "ref": "title",
        "update_cb": this.update_all.bind(this)
      }), React.createElement(AtcClientContorl, {
        "ref": "contorl",
        "update_cb": this.update_all.bind(this)
      }), React.createElement(AtcClientList, {
        "ref": "list",
        "update_cb": this.update_all.bind(this)
      }));
    }
  });

}).call(this);
