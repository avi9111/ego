// Generated by CoffeeScript 1.12.7
(function() {
  var $, AccountKeyInput, GameServerList, JsonMod, MailAllSender, NumInput, React, SendToAllMailReward, getAvataName, getHcName, getScName, mkJsonMod, mkModifyModel;

  React = require('react');

  $ = require('jquery');

  GameServerList = React.createClass({displayName: "GameServerList",
    getInitialState: function() {
      return {
        data: this.props.data,
        select_profile: null,
        servers: []
      };
    },
    selectProfile: function(name) {
      return (function(_this) {
        return function() {
          return _this.setState({
            select_profile: name
          });
        };
      })(this);
    },
    getItemStyle: function(data) {
      if (this.state.select_profile === data) {
        return true;
      } else {
        return false;
      }
    },
    addOneListItem: function(data) {
      var n;
      n = data;
      return React.createElement(ListGroupItem, {
        "onClick": this.selectProfile(data),
        "active": this.getItemStyle(data),
        "key": n
      }, n);
    },
    getAllProfileToSelect: function() {
      return React.createElement("div", null, React.createElement("h6", null, "Please Select A Profile :"), React.createElement(ListGroup, null, this.state.servers.map(this.addOneListItem)));
    },
    GetSelectedProfile: function() {
      return this.state.select_profile;
    },
    componentDidMount: function() {
      return $.get("../api/v1/server_all", (function(_this) {
        return function(result) {
          return _this.setState({
            servers: JSON.parse(result)
          });
        };
      })(this));
    },
    render: function() {
      return this.getAllProfileToSelect();
    }
  });

  AccountKeyInput = React.createClass({displayName: "AccountKeyInput",
    getInitialState: function() {
      return {
        value: ''
      };
    },
    IsRight: function() {
      return this.validationState() === 'success';
    },
    validationState: function() {
      var exp, exp_init, reg, reg_init, v;
      exp = /^(\w+)\:(\d+)\:(\d+)\:(\d+)$/;
      exp_init = /^init:(\w+)\:(\d+)\:(\d+)\:(\d+)$/;
      if (this.refs.input == null) {
        return 'error';
      }
      v = this.refs.input.getValue();
      reg = v.match(exp);
      reg_init = v.match(exp_init);
      if (reg !== null || reg_init !== null) {
        return 'success';
      } else {
        return 'error';
      }
    },
    handleChange: function() {
      this.setState({
        value: this.refs.input.getValue()
      });
      return this.props.can_cb(this.refs.input.getValue(), this.IsRight());
    },
    render: function() {
      return React.createElement(Input, {
        "type": 'text',
        "value": this.state.value,
        "placeholder": 'Enter Account Key',
        "label": 'Please Enter Account Key',
        "help": 'Validation is based on string in profile:X:X:XXX',
        "bsStyle": this.validationState(),
        "hasFeedback": true,
        "ref": 'input',
        "groupClassName": 'group-class',
        "labelClassName": 'label-class',
        "onChange": this.handleChange
      });
    }
  });

  NumInput = React.createClass({displayName: "NumInput",
    getInitialState: function() {
      return {
        value: parseInt(this.props.old)
      };
    },
    IsRight: function() {
      return this.validationState() === 'success';
    },
    validationState: function() {
      var exp, ref, reg, v;
      exp = /^(\d+)$/;
      if (this.refs.input == null) {
        return 'error';
      }
      v = this.refs.input.getValue();
      reg = v.match(exp);
      if (reg !== null && (parseInt(this.props.min) <= (ref = parseInt(v)) && ref < parseInt(this.props.max))) {
        return 'success';
      } else {
        return 'error';
      }
    },
    handleChange: function() {
      var v;
      this.setState({
        value: this.refs.input.getValue()
      });
      v = this.refs.input.getValue();
      return this.props.can_cb(parseInt(v), this.IsRight());
    },
    render: function() {
      return React.createElement(Input, {
        "type": 'text',
        "value": this.state.value,
        "placeholder": 'Enter ' + this.props.name,
        "label": 'Please Enter ' + this.props.name,
        "help": 'MUST in [' + this.props.min + "," + this.props.max + ")",
        "bsStyle": this.validationState(),
        "hasFeedback": true,
        "ref": 'input',
        "groupClassName": 'group-class',
        "labelClassName": 'label-class',
        "onChange": this.handleChange
      });
    }
  });

  getAvataName = function(id) {
    var n, names;
    names = ["关羽", "张飞", "孙尚香"];
    n = names[id];
    if (n == null) {
      n = "未定义主角" + id.toString();
    }
    return n;
  };

  getScName = function(id) {
    var n, names;
    names = ["金钱", "精铁"];
    n = names[id];
    if (n == null) {
      n = "未使用类型" + id.toString();
    }
    return n;
  };

  getHcName = function(id) {
    var n, names;
    names = ["购买钻", "赠送钻", "补偿钻", "钻石总量"];
    n = names[id];
    if (n == null) {
      n = "未使用类型" + id.toString();
    }
    return n;
  };

  mkModifyModel = function(logic) {
    return React.createClass({
      getInitialState: function() {
        return {
          cb: this.props.cb,
          maker: this.props.maker,
          is_ok: true,
          v: this.props.v,
          l: logic
        };
      },
      montify: function() {
        console.log(this.state);
        this.props.cb(this.props.maker.key, this.state.v);
        this.props.onRequestHide();
      },
      render: function() {
        return React.createElement(Modal, Object.assign({}, this.props, {
          "title": this.props.maker.name,
          "animation": true
        }), React.createElement("div", {
          "className": 'modal-body'
        }, this.state.l.ModifyRender(this), React.createElement(ButtonToolbar, null, React.createElement(Button, {
          "bsStyle": 'primary',
          "onClick": this.montify,
          "disabled": !this.state.is_ok
        }, "Montify"), React.createElement(Button, {
          "onClick": this.props.onRequestHide
        }, "Cancel"))));
      }
    });
  };

  JsonMod = React.createClass({displayName: "JsonMod",
    getInitialState: function() {
      return {};
    },
    componentDidMount: function() {
      var container, editor, options;
      container = document.getElementById(this.props.name + "jsoneditor");
      options = {
        mode: 'view'
      };
      editor = new JSONEditor(container, options);
      editor.set(JSON.parse(this.props.data));
    },
    render: function() {
      return React.createElement("div", {
        "id": this.props.name + "jsoneditor"
      });
    }
  });

  mkJsonMod = function(data, name) {
    return React.createElement("div", null, React.createElement(JsonMod, {
      "id": name,
      "key": name,
      "data": data,
      "name": name
    }));
  };

  SendToAllMailReward = React.createClass({displayName: "SendToAllMailReward",
    getInitialState: function() {
      return {};
    },
    montify: function() {
      console.log("montify");
      this.props.onRequestHide();
    },
    render: function() {
      return React.createElement(Modal, Object.assign({}, this.props, {
        "title": "全服发送奖励邮件",
        "animation": true
      }), React.createElement("div", {
        "className": 'modal-body'
      }, React.createElement(ButtonToolbar, null, React.createElement("hr", null), React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": this.montify
      }, "发送"), React.createElement(Button, {
        "onClick": this.props.onRequestHide
      }, "取消"))));
    }
  });

  MailAllSender = React.createClass({displayName: "MailAllSender",
    getInitialState: function() {
      return {
        servers: []
      };
    },
    componentDidMount: function() {
      return $.get("../api/v1/server_all", (function(_this) {
        return function(result) {
          return _this.setState({
            servers: JSON.parse(result)
          });
        };
      })(this));
    },
    render: function() {
      return React.createElement("div", null, React.createElement("div", null, React.createElement("div", {
        "id": "header"
      }, React.createElement("h1", null, "\"MailAllSender\""))), React.createElement("div", null, React.createElement("div", {
        "id": "servers"
      }, React.createElement(GameServerList, {
        "ref": "selector"
      })), React.createElement(ModalTrigger, {
        "modal": React.createElement(SendToAllMailReward, null)
      }, React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": null
      }, "Modify"))));
    }
  });

}).call(this);
