// Generated by CoffeeScript 1.12.7
(function() {
  var LanguagePicker, MultiLangModal, MultiLangPicker, React, Select, antd, langMap;

  React = require('react');

  antd = require('antd');

  Select = antd.Select;

  langMap = {
    "zh-Hans": "zh-Hans",
    "zh-SG": "zh-SG",
    "zh-HMT": "zh-HMT",
    "en": "en"
  };

  LanguagePicker = React.createClass({displayName: "LanguagePicker",
    handleChange: function(data) {
      return this.props.handleChange(data);
    },
    fillSelect: function() {
      var key, res;
      res = [];
      for (key in langMap) {
        res.push(React.createElement(Option, {
          "value": key
        }, langMap[key]));
      }
      return res;
    },
    render: function() {
      return React.createElement(Select, {
        "defaultValue": "zh-Hans",
        "style": {
          width: 85
        },
        "onChange": this.handleChange
      }, this.fillSelect());
    }
  });

  MultiLangPicker = React.createClass({displayName: "MultiLangPicker",
    handleChange: function(data) {
      return this.props.handleChange(data);
    },
    render: function() {
      return React.createElement(Select, {
        "defaultValue": this.props.defaultValue,
        "style": {
          width: 85
        },
        "onChange": this.handleChange
      }, React.createElement(Option, {
        "value": "0"
      }, "普通"), React.createElement(Option, {
        "value": "1"
      }, "多语言"));
    }
  });

  MultiLangModal = React.createClass({displayName: "MultiLangModal",
    getInitialState: function() {
      var key, propsLang, s, tempBody, tempLang, tempMultiLang, tempTitle;
      propsLang = this.props.lang;
      tempLang = {};
      if (!propsLang || !propsLang["zh-Hans"]) {
        if (!this.IsJsonString(propsLang)) {
          for (key in langMap) {
            tempLang[key] = {
              title: "",
              body: ""
            };
          }
        } else {
          tempLang = JSON.parse(propsLang);
        }
      } else {
        tempLang = propsLang;
      }
      if (this.props.multi_lang === "1") {
        tempTitle = tempLang["zh-Hans"].title;
        tempBody = tempLang["zh-Hans"].body;
      } else {
        tempTitle = this.props.title;
        tempBody = this.props.body;
      }
      tempMultiLang = this.props.multi_lang;
      if (tempMultiLang !== "1") {
        tempMultiLang = "0";
      }
      s = {
        title: tempTitle,
        body: tempBody,
        language: tempLang,
        cur_lang: "zh-Hans",
        multi_lang: tempMultiLang
      };
      return s;
    },
    IsJsonString: function(jsonStr) {
      var err;
      if (jsonStr === "" || !jsonStr) {
        return false;
      }
      try {
        JSON.parse(jsonStr);
        return true;
      } catch (error) {
        err = error;
        return false;
      }
    },
    handleChange: function(data) {
      return this.props.handleChange(data);
    },
    handleTitleChange: function(event) {
      var tempMap;
      tempMap = this.state.language;
      tempMap[this.state.cur_lang].title = event.target.value;
      return this.setState({
        title: event.target.value,
        language: tempMap
      }, function() {
        return this.handleChange(this.state);
      });
    },
    handleInfoChange: function(event) {
      var tempMap;
      tempMap = this.state.language;
      tempMap[this.state.cur_lang].body = event.target.value;
      return this.setState({
        body: event.target.value,
        language: tempMap
      }, function() {
        return this.handleChange(this.state);
      });
    },
    handleLanguageChange: function(value) {
      var tempMap;
      tempMap = this.state.language;
      return this.setState({
        cur_lang: value,
        title: tempMap[value].title,
        body: tempMap[value].body
      }, function() {
        return this.handleChange(this.state);
      });
    },
    handleMultiLangChange: function(value) {
      return this.setState({
        multi_lang: value
      }, function() {
        return this.handleChange(this.state);
      });
    },
    render: function() {
      return React.createElement("div", null, React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "多语言:"), React.createElement(MultiLangPicker, {
        "defaultValue": this.state.multi_lang,
        "handleChange": this.handleMultiLangChange
      }), React.createElement("div", null, "语言类型:"), React.createElement(LanguagePicker, {
        "defaultValue": this.state.cur_lang,
        "handleChange": this.handleLanguageChange
      })), React.createElement("div", {
        "className": "row-flex row-flex-middle row-flex-start"
      }, React.createElement("div", null, "邮件标题:"), React.createElement("input", {
        "className": "ant-input",
        "value": this.state.title,
        "onChange": this.handleTitleChange
      })), React.createElement("p", null, "邮件内容:"), React.createElement("textarea", {
        "className": "ant-input",
        "value": this.state.body,
        "onChange": this.handleInfoChange
      }));
    }
  });

  module.exports = {
    LanguagePicker: LanguagePicker,
    MultiLangPicker: MultiLangPicker,
    langMap: langMap,
    MultiLangModal: MultiLangModal
  };

}).call(this);
