// Generated by CoffeeScript 1.11.1
(function() {
  var Button, ButtonToolbar, DropdownButton, Greeting, Header, HelloMessage, LoadingButton, MenuItem, Modal, Test01, nullfunc;

  HelloMessage = React.createClass({displayName: "HelloMessage",
    render: function() {
      return React.createElement("div", null, "Hello ", this.props.name);
    }
  });

  ButtonToolbar = ReactBootstrap.ButtonToolbar;

  Button = ReactBootstrap.Button;

  MenuItem = ReactBootstrap.MenuItem;

  DropdownButton = ReactBootstrap.DropdownButton;

  Modal = ReactBootstrap.Modal;

  Greeting = React.createClass({displayName: "Greeting",
    getInitialState: function() {
      return {
        greeted: false
      };
    },
    greet: function() {
      this.setState({
        greeted: true
      });
    },
    render: function() {
      var ref, response;
      response = (ref = this.state.greeted) != null ? ref : {
        'Hi': ''
      };
      return React.createElement("div", null, React.createElement("div", null, "Hello ", this.props.name), React.createElement("span", null, response), React.createElement("button", {
        "onClick": this.greet
      }, "Hi"));
    }
  });

  nullfunc = function() {};

  Header = React.createClass({displayName: "Header",
    render: function() {
      return React.createElement(ButtonToolbar, null, React.createElement(DropdownButton, {
        "bsStyle": "link",
        "title": "default"
      }, React.createElement(MenuItem, {
        "eventKey": "1"
      }, "active"), React.createElement(MenuItem, {
        "divider": true
      })));
    }
  });

  LoadingButton = React.createClass({displayName: "LoadingButton",
    getInitialState: function() {
      return {
        isLoading: false
      };
    },
    handleClick: function() {
      this.setState({
        isLoading: true
      });
      return setTimeout(this.setIsLoading, 2000);
    },
    setIsLoading: function() {
      this.setState({
        isLoading: false
      });
      return React.render(React.createElement(Test01, null), document.getElementById(this.props.Ele));
    },
    onbuttonClick: function() {
      if (this.isLoading) {
        return null;
      } else {
        return this.handleClick;
      }
    },
    render: function() {
      var isLoading;
      isLoading = this.state.isLoading;
      return React.createElement(Button, {
        "bsStyle": 'primary',
        "disabled": isLoading,
        "onClick": this.onbuttonClick()
      }, (isLoading ? 'Loading...' : 'Loading state'));
    }
  });

  React.render(React.createElement(LoadingButton, {
    "Ele": 'content3'
  }), document.getElementById('content3'));

  Test01 = React.createClass({displayName: "Test01",
    getInitialState: function() {
      return {
        info: "Wait to Loading ..."
      };
    },
    onbuttonClick: function() {
      return React.render(React.createElement(LoadingButton, {
        "Ele": 'content3'
      }), document.getElementById('content3'));
    },
    onbuttonLoading: function() {
      return $.ajax({
        url: "http://127.0.0.1:3000/",
        cache: false,
        success: (function(_this) {
          return function(data) {
            return _this.setState({
              info: data
            });
          };
        })(this),
        error: (function(_this) {
          return function(xhr, status, err) {
            return console.error(err.toString());
          };
        })(this)
      });
    },
    render: function() {
      return React.createElement("div", {
        "className": 'static-modal'
      }, React.createElement(Modal, {
        "title": 'Modal title',
        "backdrop": false,
        "animation": false,
        "container": document.getElementById('content3'),
        "onRequestHide": nullfunc
      }, React.createElement("div", {
        "className": 'modal-body'
      }, this.state.info), React.createElement("div", {
        "className": 'modal-footer'
      }, React.createElement(Button, {
        "onClick": this.onbuttonClick
      }, "Close"), React.createElement(Button, {
        "bsStyle": 'primary',
        "onClick": this.onbuttonLoading
      }, "Load"))));
    }
  });

}).call(this);
