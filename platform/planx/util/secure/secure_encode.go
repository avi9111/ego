package secure

import (
	"crypto/md5"
	"encoding/base64"
	"io"
)

/*
SecureEncode 用于便于网络传输明文的简单加密和用户密码加密传输和加密存储

使用了加密的base64特殊辞典和md5 salt的方式使得http传输和保存都很安全
Generated by below python scripts

```
from random import shuffle
e = [x for x in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"]
shuffle(e)
"".join(e)
```
*/
type SecureEncode struct {
	b64PwdEncoding *base64.Encoding
	encodePwdStr   string
	salt           string
}

const defaultEncodePwd = "b5lI9j_WtiXL4GHkOQaf1ADngvx2sqBF8YEdNpmwSRhyPurT-CV0JUzoMZc67e3K"
const defaultSalt = "34rfdsf3rdkunj;l9"

var DefaultEncode *SecureEncode

func init() {
	DefaultEncode = New(defaultEncodePwd, defaultSalt)
}

func New(base64map, salt string) *SecureEncode {
	return &SecureEncode{
		b64PwdEncoding: base64.NewEncoding(base64map),
		encodePwdStr:   base64map,
		salt:           salt,
	}
}

// PasswordRawForDB 加密后保存到数据库使用的密码，传入明文
// 测试用例使用，游戏中只能拿到客户端md5(passwd)
// 但是这里实现了全过程md5(salt+md5(passwd))
func (s *SecureEncode) PasswordRawForDB(rawPasswd string) []byte {
	h := md5.New()
	clientBytes := s.PasswordRawForClient(rawPasswd)
	io.WriteString(h, s.salt)
	io.WriteString(h, string(clientBytes))
	return h.Sum(nil)
}

// PasswordRawForClient 属于测试用例使用md5(passwd)
func (s *SecureEncode) PasswordRawForClient(rawPasswd string) []byte {
	h := md5.New()
	io.WriteString(h, rawPasswd)
	return h.Sum(nil)
}

func (s *SecureEncode) PasswordForDB(md5Passwd string) []byte {
	h := md5.New()
	io.WriteString(h, s.salt)
	io.WriteString(h, md5Passwd)
	return h.Sum(nil)
}

// Encode64ForNet 加密码用户互联网传输, 传入明文密码
func (s *SecureEncode) Encode64ForNet(raw []byte) string {
	return s.b64PwdEncoding.EncodeToString(raw)
}

// DecodeFromNet 解密 加密传输数据成明文
func (s *SecureEncode) Decode64FromNet(raw string) ([]byte, error) {
	return s.b64PwdEncoding.DecodeString(raw)
}

func Encode64ForNet(raw []byte) string {
	return DefaultEncode.Encode64ForNet(raw)
}

func Decode64FromNet(raw string) ([]byte, error) {
	return DefaultEncode.Decode64FromNet(raw)
}
